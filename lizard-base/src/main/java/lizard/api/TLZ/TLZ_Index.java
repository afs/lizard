/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package lizard.api.TLZ;

@SuppressWarnings("all")
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-06-17")
public class TLZ_Index {

  public interface Iface extends TxnCtl.Iface {

    public void idxAdd(long requestId, long txnId, TLZ_ShardIndex shard, TLZ_TupleNodeId tuple) throws org.apache.thrift.TException;

    public void idxAddAll(long requestId, long txnId, TLZ_ShardIndex shard, java.util.List<TLZ_TupleNodeId> tuples) throws org.apache.thrift.TException;

    public void idxDelete(long requestId, long txnId, TLZ_ShardIndex shard, TLZ_TupleNodeId tuple) throws org.apache.thrift.TException;

    public void idxDeleteAll(long requestId, long txnId, TLZ_ShardIndex shard, java.util.List<TLZ_TupleNodeId> tuples) throws org.apache.thrift.TException;

    public java.util.List<TLZ_TupleNodeId> idxFind(long requestId, long txnId, TLZ_ShardIndex shard, TLZ_TupleNodeId pattern) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends TxnCtl .AsyncIface {

    public void idxAdd(long requestId, long txnId, TLZ_ShardIndex shard, TLZ_TupleNodeId tuple, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void idxAddAll(long requestId, long txnId, TLZ_ShardIndex shard, java.util.List<TLZ_TupleNodeId> tuples, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void idxDelete(long requestId, long txnId, TLZ_ShardIndex shard, TLZ_TupleNodeId tuple, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void idxDeleteAll(long requestId, long txnId, TLZ_ShardIndex shard, java.util.List<TLZ_TupleNodeId> tuples, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void idxFind(long requestId, long txnId, TLZ_ShardIndex shard, TLZ_TupleNodeId pattern, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TLZ_TupleNodeId>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends TxnCtl.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void idxAdd(long requestId, long txnId, TLZ_ShardIndex shard, TLZ_TupleNodeId tuple) throws org.apache.thrift.TException
    {
      send_idxAdd(requestId, txnId, shard, tuple);
      recv_idxAdd();
    }

    public void send_idxAdd(long requestId, long txnId, TLZ_ShardIndex shard, TLZ_TupleNodeId tuple) throws org.apache.thrift.TException
    {
      idxAdd_args args = new idxAdd_args();
      args.setRequestId(requestId);
      args.setTxnId(txnId);
      args.setShard(shard);
      args.setTuple(tuple);
      sendBase("idxAdd", args);
    }

    public void recv_idxAdd() throws org.apache.thrift.TException
    {
      idxAdd_result result = new idxAdd_result();
      receiveBase(result, "idxAdd");
      return;
    }

    public void idxAddAll(long requestId, long txnId, TLZ_ShardIndex shard, java.util.List<TLZ_TupleNodeId> tuples) throws org.apache.thrift.TException
    {
      send_idxAddAll(requestId, txnId, shard, tuples);
      recv_idxAddAll();
    }

    public void send_idxAddAll(long requestId, long txnId, TLZ_ShardIndex shard, java.util.List<TLZ_TupleNodeId> tuples) throws org.apache.thrift.TException
    {
      idxAddAll_args args = new idxAddAll_args();
      args.setRequestId(requestId);
      args.setTxnId(txnId);
      args.setShard(shard);
      args.setTuples(tuples);
      sendBase("idxAddAll", args);
    }

    public void recv_idxAddAll() throws org.apache.thrift.TException
    {
      idxAddAll_result result = new idxAddAll_result();
      receiveBase(result, "idxAddAll");
      return;
    }

    public void idxDelete(long requestId, long txnId, TLZ_ShardIndex shard, TLZ_TupleNodeId tuple) throws org.apache.thrift.TException
    {
      send_idxDelete(requestId, txnId, shard, tuple);
      recv_idxDelete();
    }

    public void send_idxDelete(long requestId, long txnId, TLZ_ShardIndex shard, TLZ_TupleNodeId tuple) throws org.apache.thrift.TException
    {
      idxDelete_args args = new idxDelete_args();
      args.setRequestId(requestId);
      args.setTxnId(txnId);
      args.setShard(shard);
      args.setTuple(tuple);
      sendBase("idxDelete", args);
    }

    public void recv_idxDelete() throws org.apache.thrift.TException
    {
      idxDelete_result result = new idxDelete_result();
      receiveBase(result, "idxDelete");
      return;
    }

    public void idxDeleteAll(long requestId, long txnId, TLZ_ShardIndex shard, java.util.List<TLZ_TupleNodeId> tuples) throws org.apache.thrift.TException
    {
      send_idxDeleteAll(requestId, txnId, shard, tuples);
      recv_idxDeleteAll();
    }

    public void send_idxDeleteAll(long requestId, long txnId, TLZ_ShardIndex shard, java.util.List<TLZ_TupleNodeId> tuples) throws org.apache.thrift.TException
    {
      idxDeleteAll_args args = new idxDeleteAll_args();
      args.setRequestId(requestId);
      args.setTxnId(txnId);
      args.setShard(shard);
      args.setTuples(tuples);
      sendBase("idxDeleteAll", args);
    }

    public void recv_idxDeleteAll() throws org.apache.thrift.TException
    {
      idxDeleteAll_result result = new idxDeleteAll_result();
      receiveBase(result, "idxDeleteAll");
      return;
    }

    public java.util.List<TLZ_TupleNodeId> idxFind(long requestId, long txnId, TLZ_ShardIndex shard, TLZ_TupleNodeId pattern) throws org.apache.thrift.TException
    {
      send_idxFind(requestId, txnId, shard, pattern);
      return recv_idxFind();
    }

    public void send_idxFind(long requestId, long txnId, TLZ_ShardIndex shard, TLZ_TupleNodeId pattern) throws org.apache.thrift.TException
    {
      idxFind_args args = new idxFind_args();
      args.setRequestId(requestId);
      args.setTxnId(txnId);
      args.setShard(shard);
      args.setPattern(pattern);
      sendBase("idxFind", args);
    }

    public java.util.List<TLZ_TupleNodeId> recv_idxFind() throws org.apache.thrift.TException
    {
      idxFind_result result = new idxFind_result();
      receiveBase(result, "idxFind");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "idxFind failed: unknown result");
    }

  }
  public static class AsyncClient extends TxnCtl.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void idxAdd(long requestId, long txnId, TLZ_ShardIndex shard, TLZ_TupleNodeId tuple, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      idxAdd_call method_call = new idxAdd_call(requestId, txnId, shard, tuple, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class idxAdd_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private long requestId;
      private long txnId;
      private TLZ_ShardIndex shard;
      private TLZ_TupleNodeId tuple;
      public idxAdd_call(long requestId, long txnId, TLZ_ShardIndex shard, TLZ_TupleNodeId tuple, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.txnId = txnId;
        this.shard = shard;
        this.tuple = tuple;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("idxAdd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        idxAdd_args args = new idxAdd_args();
        args.setRequestId(requestId);
        args.setTxnId(txnId);
        args.setShard(shard);
        args.setTuple(tuple);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void idxAddAll(long requestId, long txnId, TLZ_ShardIndex shard, java.util.List<TLZ_TupleNodeId> tuples, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      idxAddAll_call method_call = new idxAddAll_call(requestId, txnId, shard, tuples, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class idxAddAll_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private long requestId;
      private long txnId;
      private TLZ_ShardIndex shard;
      private java.util.List<TLZ_TupleNodeId> tuples;
      public idxAddAll_call(long requestId, long txnId, TLZ_ShardIndex shard, java.util.List<TLZ_TupleNodeId> tuples, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.txnId = txnId;
        this.shard = shard;
        this.tuples = tuples;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("idxAddAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        idxAddAll_args args = new idxAddAll_args();
        args.setRequestId(requestId);
        args.setTxnId(txnId);
        args.setShard(shard);
        args.setTuples(tuples);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void idxDelete(long requestId, long txnId, TLZ_ShardIndex shard, TLZ_TupleNodeId tuple, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      idxDelete_call method_call = new idxDelete_call(requestId, txnId, shard, tuple, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class idxDelete_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private long requestId;
      private long txnId;
      private TLZ_ShardIndex shard;
      private TLZ_TupleNodeId tuple;
      public idxDelete_call(long requestId, long txnId, TLZ_ShardIndex shard, TLZ_TupleNodeId tuple, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.txnId = txnId;
        this.shard = shard;
        this.tuple = tuple;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("idxDelete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        idxDelete_args args = new idxDelete_args();
        args.setRequestId(requestId);
        args.setTxnId(txnId);
        args.setShard(shard);
        args.setTuple(tuple);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void idxDeleteAll(long requestId, long txnId, TLZ_ShardIndex shard, java.util.List<TLZ_TupleNodeId> tuples, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      idxDeleteAll_call method_call = new idxDeleteAll_call(requestId, txnId, shard, tuples, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class idxDeleteAll_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private long requestId;
      private long txnId;
      private TLZ_ShardIndex shard;
      private java.util.List<TLZ_TupleNodeId> tuples;
      public idxDeleteAll_call(long requestId, long txnId, TLZ_ShardIndex shard, java.util.List<TLZ_TupleNodeId> tuples, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.txnId = txnId;
        this.shard = shard;
        this.tuples = tuples;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("idxDeleteAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        idxDeleteAll_args args = new idxDeleteAll_args();
        args.setRequestId(requestId);
        args.setTxnId(txnId);
        args.setShard(shard);
        args.setTuples(tuples);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void idxFind(long requestId, long txnId, TLZ_ShardIndex shard, TLZ_TupleNodeId pattern, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TLZ_TupleNodeId>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      idxFind_call method_call = new idxFind_call(requestId, txnId, shard, pattern, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class idxFind_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TLZ_TupleNodeId>> {
      private long requestId;
      private long txnId;
      private TLZ_ShardIndex shard;
      private TLZ_TupleNodeId pattern;
      public idxFind_call(long requestId, long txnId, TLZ_ShardIndex shard, TLZ_TupleNodeId pattern, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TLZ_TupleNodeId>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.txnId = txnId;
        this.shard = shard;
        this.pattern = pattern;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("idxFind", org.apache.thrift.protocol.TMessageType.CALL, 0));
        idxFind_args args = new idxFind_args();
        args.setRequestId(requestId);
        args.setTxnId(txnId);
        args.setShard(shard);
        args.setPattern(pattern);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TLZ_TupleNodeId> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_idxFind();
      }
    }

  }

  public static class Processor<I extends Iface> extends TxnCtl.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("idxAdd", new idxAdd());
      processMap.put("idxAddAll", new idxAddAll());
      processMap.put("idxDelete", new idxDelete());
      processMap.put("idxDeleteAll", new idxDeleteAll());
      processMap.put("idxFind", new idxFind());
      return processMap;
    }

    public static class idxAdd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, idxAdd_args> {
      public idxAdd() {
        super("idxAdd");
      }

      public idxAdd_args getEmptyArgsInstance() {
        return new idxAdd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public idxAdd_result getResult(I iface, idxAdd_args args) throws org.apache.thrift.TException {
        idxAdd_result result = new idxAdd_result();
        iface.idxAdd(args.requestId, args.txnId, args.shard, args.tuple);
        return result;
      }
    }

    public static class idxAddAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, idxAddAll_args> {
      public idxAddAll() {
        super("idxAddAll");
      }

      public idxAddAll_args getEmptyArgsInstance() {
        return new idxAddAll_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public idxAddAll_result getResult(I iface, idxAddAll_args args) throws org.apache.thrift.TException {
        idxAddAll_result result = new idxAddAll_result();
        iface.idxAddAll(args.requestId, args.txnId, args.shard, args.tuples);
        return result;
      }
    }

    public static class idxDelete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, idxDelete_args> {
      public idxDelete() {
        super("idxDelete");
      }

      public idxDelete_args getEmptyArgsInstance() {
        return new idxDelete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public idxDelete_result getResult(I iface, idxDelete_args args) throws org.apache.thrift.TException {
        idxDelete_result result = new idxDelete_result();
        iface.idxDelete(args.requestId, args.txnId, args.shard, args.tuple);
        return result;
      }
    }

    public static class idxDeleteAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, idxDeleteAll_args> {
      public idxDeleteAll() {
        super("idxDeleteAll");
      }

      public idxDeleteAll_args getEmptyArgsInstance() {
        return new idxDeleteAll_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public idxDeleteAll_result getResult(I iface, idxDeleteAll_args args) throws org.apache.thrift.TException {
        idxDeleteAll_result result = new idxDeleteAll_result();
        iface.idxDeleteAll(args.requestId, args.txnId, args.shard, args.tuples);
        return result;
      }
    }

    public static class idxFind<I extends Iface> extends org.apache.thrift.ProcessFunction<I, idxFind_args> {
      public idxFind() {
        super("idxFind");
      }

      public idxFind_args getEmptyArgsInstance() {
        return new idxFind_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public idxFind_result getResult(I iface, idxFind_args args) throws org.apache.thrift.TException {
        idxFind_result result = new idxFind_result();
        result.success = iface.idxFind(args.requestId, args.txnId, args.shard, args.pattern);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends TxnCtl.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("idxAdd", new idxAdd());
      processMap.put("idxAddAll", new idxAddAll());
      processMap.put("idxDelete", new idxDelete());
      processMap.put("idxDeleteAll", new idxDeleteAll());
      processMap.put("idxFind", new idxFind());
      return processMap;
    }

    public static class idxAdd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, idxAdd_args, Void> {
      public idxAdd() {
        super("idxAdd");
      }

      public idxAdd_args getEmptyArgsInstance() {
        return new idxAdd_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            idxAdd_result result = new idxAdd_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            idxAdd_result result = new idxAdd_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, idxAdd_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.idxAdd(args.requestId, args.txnId, args.shard, args.tuple,resultHandler);
      }
    }

    public static class idxAddAll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, idxAddAll_args, Void> {
      public idxAddAll() {
        super("idxAddAll");
      }

      public idxAddAll_args getEmptyArgsInstance() {
        return new idxAddAll_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            idxAddAll_result result = new idxAddAll_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            idxAddAll_result result = new idxAddAll_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, idxAddAll_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.idxAddAll(args.requestId, args.txnId, args.shard, args.tuples,resultHandler);
      }
    }

    public static class idxDelete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, idxDelete_args, Void> {
      public idxDelete() {
        super("idxDelete");
      }

      public idxDelete_args getEmptyArgsInstance() {
        return new idxDelete_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            idxDelete_result result = new idxDelete_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            idxDelete_result result = new idxDelete_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, idxDelete_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.idxDelete(args.requestId, args.txnId, args.shard, args.tuple,resultHandler);
      }
    }

    public static class idxDeleteAll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, idxDeleteAll_args, Void> {
      public idxDeleteAll() {
        super("idxDeleteAll");
      }

      public idxDeleteAll_args getEmptyArgsInstance() {
        return new idxDeleteAll_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            idxDeleteAll_result result = new idxDeleteAll_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            idxDeleteAll_result result = new idxDeleteAll_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, idxDeleteAll_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.idxDeleteAll(args.requestId, args.txnId, args.shard, args.tuples,resultHandler);
      }
    }

    public static class idxFind<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, idxFind_args, java.util.List<TLZ_TupleNodeId>> {
      public idxFind() {
        super("idxFind");
      }

      public idxFind_args getEmptyArgsInstance() {
        return new idxFind_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TLZ_TupleNodeId>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TLZ_TupleNodeId>>() { 
          public void onComplete(java.util.List<TLZ_TupleNodeId> o) {
            idxFind_result result = new idxFind_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            idxFind_result result = new idxFind_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, idxFind_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TLZ_TupleNodeId>> resultHandler) throws org.apache.thrift.TException {
        iface.idxFind(args.requestId, args.txnId, args.shard, args.pattern,resultHandler);
      }
    }

  }

  public static class idxAdd_args implements org.apache.thrift.TBase<idxAdd_args, idxAdd_args._Fields>, java.io.Serializable, Cloneable, Comparable<idxAdd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("idxAdd_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txnId", org.apache.thrift.protocol.TType.I64, (short)9);
    private static final org.apache.thrift.protocol.TField SHARD_FIELD_DESC = new org.apache.thrift.protocol.TField("shard", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField TUPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new idxAdd_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new idxAdd_argsTupleSchemeFactory();

    public long requestId; // required
    public long txnId; // required
    public TLZ_ShardIndex shard; // required
    public TLZ_TupleNodeId tuple; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      TXN_ID((short)9, "txnId"),
      SHARD((short)3, "shard"),
      TUPLE((short)4, "tuple");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 9: // TXN_ID
            return TXN_ID;
          case 3: // SHARD
            return SHARD;
          case 4: // TUPLE
            return TUPLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __TXNID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txnId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TxnId")));
      tmpMap.put(_Fields.SHARD, new org.apache.thrift.meta_data.FieldMetaData("shard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLZ_ShardIndex.class)));
      tmpMap.put(_Fields.TUPLE, new org.apache.thrift.meta_data.FieldMetaData("tuple", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLZ_TupleNodeId.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(idxAdd_args.class, metaDataMap);
    }

    public idxAdd_args() {
    }

    public idxAdd_args(
      long requestId,
      long txnId,
      TLZ_ShardIndex shard,
      TLZ_TupleNodeId tuple)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.txnId = txnId;
      setTxnIdIsSet(true);
      this.shard = shard;
      this.tuple = tuple;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public idxAdd_args(idxAdd_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.txnId = other.txnId;
      if (other.isSetShard()) {
        this.shard = new TLZ_ShardIndex(other.shard);
      }
      if (other.isSetTuple()) {
        this.tuple = new TLZ_TupleNodeId(other.tuple);
      }
    }

    public idxAdd_args deepCopy() {
      return new idxAdd_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setTxnIdIsSet(false);
      this.txnId = 0;
      this.shard = null;
      this.tuple = null;
    }

    public long getRequestId() {
      return this.requestId;
    }

    public idxAdd_args setRequestId(long requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public long getTxnId() {
      return this.txnId;
    }

    public idxAdd_args setTxnId(long txnId) {
      this.txnId = txnId;
      setTxnIdIsSet(true);
      return this;
    }

    public void unsetTxnId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    /** Returns true if field txnId is set (has been assigned a value) and false otherwise */
    public boolean isSetTxnId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    public void setTxnIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXNID_ISSET_ID, value);
    }

    public TLZ_ShardIndex getShard() {
      return this.shard;
    }

    public idxAdd_args setShard(TLZ_ShardIndex shard) {
      this.shard = shard;
      return this;
    }

    public void unsetShard() {
      this.shard = null;
    }

    /** Returns true if field shard is set (has been assigned a value) and false otherwise */
    public boolean isSetShard() {
      return this.shard != null;
    }

    public void setShardIsSet(boolean value) {
      if (!value) {
        this.shard = null;
      }
    }

    public TLZ_TupleNodeId getTuple() {
      return this.tuple;
    }

    public idxAdd_args setTuple(TLZ_TupleNodeId tuple) {
      this.tuple = tuple;
      return this;
    }

    public void unsetTuple() {
      this.tuple = null;
    }

    /** Returns true if field tuple is set (has been assigned a value) and false otherwise */
    public boolean isSetTuple() {
      return this.tuple != null;
    }

    public void setTupleIsSet(boolean value) {
      if (!value) {
        this.tuple = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((java.lang.Long)value);
        }
        break;

      case TXN_ID:
        if (value == null) {
          unsetTxnId();
        } else {
          setTxnId((java.lang.Long)value);
        }
        break;

      case SHARD:
        if (value == null) {
          unsetShard();
        } else {
          setShard((TLZ_ShardIndex)value);
        }
        break;

      case TUPLE:
        if (value == null) {
          unsetTuple();
        } else {
          setTuple((TLZ_TupleNodeId)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return getRequestId();

      case TXN_ID:
        return getTxnId();

      case SHARD:
        return getShard();

      case TUPLE:
        return getTuple();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case TXN_ID:
        return isSetTxnId();
      case SHARD:
        return isSetShard();
      case TUPLE:
        return isSetTuple();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof idxAdd_args)
        return this.equals((idxAdd_args)that);
      return false;
    }

    public boolean equals(idxAdd_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_txnId = true;
      boolean that_present_txnId = true;
      if (this_present_txnId || that_present_txnId) {
        if (!(this_present_txnId && that_present_txnId))
          return false;
        if (this.txnId != that.txnId)
          return false;
      }

      boolean this_present_shard = true && this.isSetShard();
      boolean that_present_shard = true && that.isSetShard();
      if (this_present_shard || that_present_shard) {
        if (!(this_present_shard && that_present_shard))
          return false;
        if (!this.shard.equals(that.shard))
          return false;
      }

      boolean this_present_tuple = true && this.isSetTuple();
      boolean that_present_tuple = true && that.isSetTuple();
      if (this_present_tuple || that_present_tuple) {
        if (!(this_present_tuple && that_present_tuple))
          return false;
        if (!this.tuple.equals(that.tuple))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestId);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txnId);

      hashCode = hashCode * 8191 + ((isSetShard()) ? 131071 : 524287);
      if (isSetShard())
        hashCode = hashCode * 8191 + shard.hashCode();

      hashCode = hashCode * 8191 + ((isSetTuple()) ? 131071 : 524287);
      if (isSetTuple())
        hashCode = hashCode * 8191 + tuple.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(idxAdd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTxnId()).compareTo(other.isSetTxnId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxnId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnId, other.txnId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetShard()).compareTo(other.isSetShard());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShard()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shard, other.shard);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTuple()).compareTo(other.isSetTuple());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTuple()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple, other.tuple);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("idxAdd_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("txnId:");
      sb.append(this.txnId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("shard:");
      if (this.shard == null) {
        sb.append("null");
      } else {
        sb.append(this.shard);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tuple:");
      if (this.tuple == null) {
        sb.append("null");
      } else {
        sb.append(this.tuple);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (shard != null) {
        shard.validate();
      }
      if (tuple != null) {
        tuple.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class idxAdd_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public idxAdd_argsStandardScheme getScheme() {
        return new idxAdd_argsStandardScheme();
      }
    }

    private static class idxAdd_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<idxAdd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, idxAdd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.requestId = iprot.readI64();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // TXN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.txnId = iprot.readI64();
                struct.setTxnIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SHARD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.shard = new TLZ_ShardIndex();
                struct.shard.read(iprot);
                struct.setShardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TUPLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tuple = new TLZ_TupleNodeId();
                struct.tuple.read(iprot);
                struct.setTupleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, idxAdd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI64(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.shard != null) {
          oprot.writeFieldBegin(SHARD_FIELD_DESC);
          struct.shard.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tuple != null) {
          oprot.writeFieldBegin(TUPLE_FIELD_DESC);
          struct.tuple.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.txnId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class idxAdd_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public idxAdd_argsTupleScheme getScheme() {
        return new idxAdd_argsTupleScheme();
      }
    }

    private static class idxAdd_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<idxAdd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, idxAdd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetTxnId()) {
          optionals.set(1);
        }
        if (struct.isSetShard()) {
          optionals.set(2);
        }
        if (struct.isSetTuple()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequestId()) {
          oprot.writeI64(struct.requestId);
        }
        if (struct.isSetTxnId()) {
          oprot.writeI64(struct.txnId);
        }
        if (struct.isSetShard()) {
          struct.shard.write(oprot);
        }
        if (struct.isSetTuple()) {
          struct.tuple.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, idxAdd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI64();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txnId = iprot.readI64();
          struct.setTxnIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.shard = new TLZ_ShardIndex();
          struct.shard.read(iprot);
          struct.setShardIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tuple = new TLZ_TupleNodeId();
          struct.tuple.read(iprot);
          struct.setTupleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class idxAdd_result implements org.apache.thrift.TBase<idxAdd_result, idxAdd_result._Fields>, java.io.Serializable, Cloneable, Comparable<idxAdd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("idxAdd_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new idxAdd_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new idxAdd_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(idxAdd_result.class, metaDataMap);
    }

    public idxAdd_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public idxAdd_result(idxAdd_result other) {
    }

    public idxAdd_result deepCopy() {
      return new idxAdd_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof idxAdd_result)
        return this.equals((idxAdd_result)that);
      return false;
    }

    public boolean equals(idxAdd_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(idxAdd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("idxAdd_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class idxAdd_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public idxAdd_resultStandardScheme getScheme() {
        return new idxAdd_resultStandardScheme();
      }
    }

    private static class idxAdd_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<idxAdd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, idxAdd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, idxAdd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class idxAdd_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public idxAdd_resultTupleScheme getScheme() {
        return new idxAdd_resultTupleScheme();
      }
    }

    private static class idxAdd_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<idxAdd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, idxAdd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, idxAdd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class idxAddAll_args implements org.apache.thrift.TBase<idxAddAll_args, idxAddAll_args._Fields>, java.io.Serializable, Cloneable, Comparable<idxAddAll_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("idxAddAll_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txnId", org.apache.thrift.protocol.TType.I64, (short)9);
    private static final org.apache.thrift.protocol.TField SHARD_FIELD_DESC = new org.apache.thrift.protocol.TField("shard", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField TUPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("tuples", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new idxAddAll_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new idxAddAll_argsTupleSchemeFactory();

    public long requestId; // required
    public long txnId; // required
    public TLZ_ShardIndex shard; // required
    public java.util.List<TLZ_TupleNodeId> tuples; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      TXN_ID((short)9, "txnId"),
      SHARD((short)3, "shard"),
      TUPLES((short)4, "tuples");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 9: // TXN_ID
            return TXN_ID;
          case 3: // SHARD
            return SHARD;
          case 4: // TUPLES
            return TUPLES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __TXNID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txnId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TxnId")));
      tmpMap.put(_Fields.SHARD, new org.apache.thrift.meta_data.FieldMetaData("shard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLZ_ShardIndex.class)));
      tmpMap.put(_Fields.TUPLES, new org.apache.thrift.meta_data.FieldMetaData("tuples", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLZ_TupleNodeId.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(idxAddAll_args.class, metaDataMap);
    }

    public idxAddAll_args() {
    }

    public idxAddAll_args(
      long requestId,
      long txnId,
      TLZ_ShardIndex shard,
      java.util.List<TLZ_TupleNodeId> tuples)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.txnId = txnId;
      setTxnIdIsSet(true);
      this.shard = shard;
      this.tuples = tuples;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public idxAddAll_args(idxAddAll_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.txnId = other.txnId;
      if (other.isSetShard()) {
        this.shard = new TLZ_ShardIndex(other.shard);
      }
      if (other.isSetTuples()) {
        java.util.List<TLZ_TupleNodeId> __this__tuples = new java.util.ArrayList<TLZ_TupleNodeId>(other.tuples.size());
        for (TLZ_TupleNodeId other_element : other.tuples) {
          __this__tuples.add(new TLZ_TupleNodeId(other_element));
        }
        this.tuples = __this__tuples;
      }
    }

    public idxAddAll_args deepCopy() {
      return new idxAddAll_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setTxnIdIsSet(false);
      this.txnId = 0;
      this.shard = null;
      this.tuples = null;
    }

    public long getRequestId() {
      return this.requestId;
    }

    public idxAddAll_args setRequestId(long requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public long getTxnId() {
      return this.txnId;
    }

    public idxAddAll_args setTxnId(long txnId) {
      this.txnId = txnId;
      setTxnIdIsSet(true);
      return this;
    }

    public void unsetTxnId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    /** Returns true if field txnId is set (has been assigned a value) and false otherwise */
    public boolean isSetTxnId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    public void setTxnIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXNID_ISSET_ID, value);
    }

    public TLZ_ShardIndex getShard() {
      return this.shard;
    }

    public idxAddAll_args setShard(TLZ_ShardIndex shard) {
      this.shard = shard;
      return this;
    }

    public void unsetShard() {
      this.shard = null;
    }

    /** Returns true if field shard is set (has been assigned a value) and false otherwise */
    public boolean isSetShard() {
      return this.shard != null;
    }

    public void setShardIsSet(boolean value) {
      if (!value) {
        this.shard = null;
      }
    }

    public int getTuplesSize() {
      return (this.tuples == null) ? 0 : this.tuples.size();
    }

    public java.util.Iterator<TLZ_TupleNodeId> getTuplesIterator() {
      return (this.tuples == null) ? null : this.tuples.iterator();
    }

    public void addToTuples(TLZ_TupleNodeId elem) {
      if (this.tuples == null) {
        this.tuples = new java.util.ArrayList<TLZ_TupleNodeId>();
      }
      this.tuples.add(elem);
    }

    public java.util.List<TLZ_TupleNodeId> getTuples() {
      return this.tuples;
    }

    public idxAddAll_args setTuples(java.util.List<TLZ_TupleNodeId> tuples) {
      this.tuples = tuples;
      return this;
    }

    public void unsetTuples() {
      this.tuples = null;
    }

    /** Returns true if field tuples is set (has been assigned a value) and false otherwise */
    public boolean isSetTuples() {
      return this.tuples != null;
    }

    public void setTuplesIsSet(boolean value) {
      if (!value) {
        this.tuples = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((java.lang.Long)value);
        }
        break;

      case TXN_ID:
        if (value == null) {
          unsetTxnId();
        } else {
          setTxnId((java.lang.Long)value);
        }
        break;

      case SHARD:
        if (value == null) {
          unsetShard();
        } else {
          setShard((TLZ_ShardIndex)value);
        }
        break;

      case TUPLES:
        if (value == null) {
          unsetTuples();
        } else {
          setTuples((java.util.List<TLZ_TupleNodeId>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return getRequestId();

      case TXN_ID:
        return getTxnId();

      case SHARD:
        return getShard();

      case TUPLES:
        return getTuples();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case TXN_ID:
        return isSetTxnId();
      case SHARD:
        return isSetShard();
      case TUPLES:
        return isSetTuples();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof idxAddAll_args)
        return this.equals((idxAddAll_args)that);
      return false;
    }

    public boolean equals(idxAddAll_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_txnId = true;
      boolean that_present_txnId = true;
      if (this_present_txnId || that_present_txnId) {
        if (!(this_present_txnId && that_present_txnId))
          return false;
        if (this.txnId != that.txnId)
          return false;
      }

      boolean this_present_shard = true && this.isSetShard();
      boolean that_present_shard = true && that.isSetShard();
      if (this_present_shard || that_present_shard) {
        if (!(this_present_shard && that_present_shard))
          return false;
        if (!this.shard.equals(that.shard))
          return false;
      }

      boolean this_present_tuples = true && this.isSetTuples();
      boolean that_present_tuples = true && that.isSetTuples();
      if (this_present_tuples || that_present_tuples) {
        if (!(this_present_tuples && that_present_tuples))
          return false;
        if (!this.tuples.equals(that.tuples))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestId);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txnId);

      hashCode = hashCode * 8191 + ((isSetShard()) ? 131071 : 524287);
      if (isSetShard())
        hashCode = hashCode * 8191 + shard.hashCode();

      hashCode = hashCode * 8191 + ((isSetTuples()) ? 131071 : 524287);
      if (isSetTuples())
        hashCode = hashCode * 8191 + tuples.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(idxAddAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTxnId()).compareTo(other.isSetTxnId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxnId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnId, other.txnId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetShard()).compareTo(other.isSetShard());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShard()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shard, other.shard);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTuples()).compareTo(other.isSetTuples());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTuples()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuples, other.tuples);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("idxAddAll_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("txnId:");
      sb.append(this.txnId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("shard:");
      if (this.shard == null) {
        sb.append("null");
      } else {
        sb.append(this.shard);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tuples:");
      if (this.tuples == null) {
        sb.append("null");
      } else {
        sb.append(this.tuples);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (shard != null) {
        shard.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class idxAddAll_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public idxAddAll_argsStandardScheme getScheme() {
        return new idxAddAll_argsStandardScheme();
      }
    }

    private static class idxAddAll_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<idxAddAll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, idxAddAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.requestId = iprot.readI64();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // TXN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.txnId = iprot.readI64();
                struct.setTxnIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SHARD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.shard = new TLZ_ShardIndex();
                struct.shard.read(iprot);
                struct.setShardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TUPLES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.tuples = new java.util.ArrayList<TLZ_TupleNodeId>(_list16.size);
                  TLZ_TupleNodeId _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new TLZ_TupleNodeId();
                    _elem17.read(iprot);
                    struct.tuples.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setTuplesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, idxAddAll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI64(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.shard != null) {
          oprot.writeFieldBegin(SHARD_FIELD_DESC);
          struct.shard.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tuples != null) {
          oprot.writeFieldBegin(TUPLES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tuples.size()));
            for (TLZ_TupleNodeId _iter19 : struct.tuples)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.txnId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class idxAddAll_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public idxAddAll_argsTupleScheme getScheme() {
        return new idxAddAll_argsTupleScheme();
      }
    }

    private static class idxAddAll_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<idxAddAll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, idxAddAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetTxnId()) {
          optionals.set(1);
        }
        if (struct.isSetShard()) {
          optionals.set(2);
        }
        if (struct.isSetTuples()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequestId()) {
          oprot.writeI64(struct.requestId);
        }
        if (struct.isSetTxnId()) {
          oprot.writeI64(struct.txnId);
        }
        if (struct.isSetShard()) {
          struct.shard.write(oprot);
        }
        if (struct.isSetTuples()) {
          {
            oprot.writeI32(struct.tuples.size());
            for (TLZ_TupleNodeId _iter20 : struct.tuples)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, idxAddAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI64();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txnId = iprot.readI64();
          struct.setTxnIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.shard = new TLZ_ShardIndex();
          struct.shard.read(iprot);
          struct.setShardIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.tuples = new java.util.ArrayList<TLZ_TupleNodeId>(_list21.size);
            TLZ_TupleNodeId _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new TLZ_TupleNodeId();
              _elem22.read(iprot);
              struct.tuples.add(_elem22);
            }
          }
          struct.setTuplesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class idxAddAll_result implements org.apache.thrift.TBase<idxAddAll_result, idxAddAll_result._Fields>, java.io.Serializable, Cloneable, Comparable<idxAddAll_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("idxAddAll_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new idxAddAll_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new idxAddAll_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(idxAddAll_result.class, metaDataMap);
    }

    public idxAddAll_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public idxAddAll_result(idxAddAll_result other) {
    }

    public idxAddAll_result deepCopy() {
      return new idxAddAll_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof idxAddAll_result)
        return this.equals((idxAddAll_result)that);
      return false;
    }

    public boolean equals(idxAddAll_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(idxAddAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("idxAddAll_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class idxAddAll_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public idxAddAll_resultStandardScheme getScheme() {
        return new idxAddAll_resultStandardScheme();
      }
    }

    private static class idxAddAll_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<idxAddAll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, idxAddAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, idxAddAll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class idxAddAll_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public idxAddAll_resultTupleScheme getScheme() {
        return new idxAddAll_resultTupleScheme();
      }
    }

    private static class idxAddAll_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<idxAddAll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, idxAddAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, idxAddAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class idxDelete_args implements org.apache.thrift.TBase<idxDelete_args, idxDelete_args._Fields>, java.io.Serializable, Cloneable, Comparable<idxDelete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("idxDelete_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txnId", org.apache.thrift.protocol.TType.I64, (short)9);
    private static final org.apache.thrift.protocol.TField SHARD_FIELD_DESC = new org.apache.thrift.protocol.TField("shard", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField TUPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new idxDelete_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new idxDelete_argsTupleSchemeFactory();

    public long requestId; // required
    public long txnId; // required
    public TLZ_ShardIndex shard; // required
    public TLZ_TupleNodeId tuple; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      TXN_ID((short)9, "txnId"),
      SHARD((short)3, "shard"),
      TUPLE((short)4, "tuple");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 9: // TXN_ID
            return TXN_ID;
          case 3: // SHARD
            return SHARD;
          case 4: // TUPLE
            return TUPLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __TXNID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txnId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TxnId")));
      tmpMap.put(_Fields.SHARD, new org.apache.thrift.meta_data.FieldMetaData("shard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLZ_ShardIndex.class)));
      tmpMap.put(_Fields.TUPLE, new org.apache.thrift.meta_data.FieldMetaData("tuple", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLZ_TupleNodeId.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(idxDelete_args.class, metaDataMap);
    }

    public idxDelete_args() {
    }

    public idxDelete_args(
      long requestId,
      long txnId,
      TLZ_ShardIndex shard,
      TLZ_TupleNodeId tuple)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.txnId = txnId;
      setTxnIdIsSet(true);
      this.shard = shard;
      this.tuple = tuple;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public idxDelete_args(idxDelete_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.txnId = other.txnId;
      if (other.isSetShard()) {
        this.shard = new TLZ_ShardIndex(other.shard);
      }
      if (other.isSetTuple()) {
        this.tuple = new TLZ_TupleNodeId(other.tuple);
      }
    }

    public idxDelete_args deepCopy() {
      return new idxDelete_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setTxnIdIsSet(false);
      this.txnId = 0;
      this.shard = null;
      this.tuple = null;
    }

    public long getRequestId() {
      return this.requestId;
    }

    public idxDelete_args setRequestId(long requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public long getTxnId() {
      return this.txnId;
    }

    public idxDelete_args setTxnId(long txnId) {
      this.txnId = txnId;
      setTxnIdIsSet(true);
      return this;
    }

    public void unsetTxnId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    /** Returns true if field txnId is set (has been assigned a value) and false otherwise */
    public boolean isSetTxnId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    public void setTxnIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXNID_ISSET_ID, value);
    }

    public TLZ_ShardIndex getShard() {
      return this.shard;
    }

    public idxDelete_args setShard(TLZ_ShardIndex shard) {
      this.shard = shard;
      return this;
    }

    public void unsetShard() {
      this.shard = null;
    }

    /** Returns true if field shard is set (has been assigned a value) and false otherwise */
    public boolean isSetShard() {
      return this.shard != null;
    }

    public void setShardIsSet(boolean value) {
      if (!value) {
        this.shard = null;
      }
    }

    public TLZ_TupleNodeId getTuple() {
      return this.tuple;
    }

    public idxDelete_args setTuple(TLZ_TupleNodeId tuple) {
      this.tuple = tuple;
      return this;
    }

    public void unsetTuple() {
      this.tuple = null;
    }

    /** Returns true if field tuple is set (has been assigned a value) and false otherwise */
    public boolean isSetTuple() {
      return this.tuple != null;
    }

    public void setTupleIsSet(boolean value) {
      if (!value) {
        this.tuple = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((java.lang.Long)value);
        }
        break;

      case TXN_ID:
        if (value == null) {
          unsetTxnId();
        } else {
          setTxnId((java.lang.Long)value);
        }
        break;

      case SHARD:
        if (value == null) {
          unsetShard();
        } else {
          setShard((TLZ_ShardIndex)value);
        }
        break;

      case TUPLE:
        if (value == null) {
          unsetTuple();
        } else {
          setTuple((TLZ_TupleNodeId)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return getRequestId();

      case TXN_ID:
        return getTxnId();

      case SHARD:
        return getShard();

      case TUPLE:
        return getTuple();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case TXN_ID:
        return isSetTxnId();
      case SHARD:
        return isSetShard();
      case TUPLE:
        return isSetTuple();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof idxDelete_args)
        return this.equals((idxDelete_args)that);
      return false;
    }

    public boolean equals(idxDelete_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_txnId = true;
      boolean that_present_txnId = true;
      if (this_present_txnId || that_present_txnId) {
        if (!(this_present_txnId && that_present_txnId))
          return false;
        if (this.txnId != that.txnId)
          return false;
      }

      boolean this_present_shard = true && this.isSetShard();
      boolean that_present_shard = true && that.isSetShard();
      if (this_present_shard || that_present_shard) {
        if (!(this_present_shard && that_present_shard))
          return false;
        if (!this.shard.equals(that.shard))
          return false;
      }

      boolean this_present_tuple = true && this.isSetTuple();
      boolean that_present_tuple = true && that.isSetTuple();
      if (this_present_tuple || that_present_tuple) {
        if (!(this_present_tuple && that_present_tuple))
          return false;
        if (!this.tuple.equals(that.tuple))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestId);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txnId);

      hashCode = hashCode * 8191 + ((isSetShard()) ? 131071 : 524287);
      if (isSetShard())
        hashCode = hashCode * 8191 + shard.hashCode();

      hashCode = hashCode * 8191 + ((isSetTuple()) ? 131071 : 524287);
      if (isSetTuple())
        hashCode = hashCode * 8191 + tuple.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(idxDelete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTxnId()).compareTo(other.isSetTxnId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxnId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnId, other.txnId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetShard()).compareTo(other.isSetShard());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShard()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shard, other.shard);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTuple()).compareTo(other.isSetTuple());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTuple()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple, other.tuple);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("idxDelete_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("txnId:");
      sb.append(this.txnId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("shard:");
      if (this.shard == null) {
        sb.append("null");
      } else {
        sb.append(this.shard);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tuple:");
      if (this.tuple == null) {
        sb.append("null");
      } else {
        sb.append(this.tuple);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (shard != null) {
        shard.validate();
      }
      if (tuple != null) {
        tuple.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class idxDelete_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public idxDelete_argsStandardScheme getScheme() {
        return new idxDelete_argsStandardScheme();
      }
    }

    private static class idxDelete_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<idxDelete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, idxDelete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.requestId = iprot.readI64();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // TXN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.txnId = iprot.readI64();
                struct.setTxnIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SHARD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.shard = new TLZ_ShardIndex();
                struct.shard.read(iprot);
                struct.setShardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TUPLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tuple = new TLZ_TupleNodeId();
                struct.tuple.read(iprot);
                struct.setTupleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, idxDelete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI64(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.shard != null) {
          oprot.writeFieldBegin(SHARD_FIELD_DESC);
          struct.shard.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tuple != null) {
          oprot.writeFieldBegin(TUPLE_FIELD_DESC);
          struct.tuple.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.txnId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class idxDelete_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public idxDelete_argsTupleScheme getScheme() {
        return new idxDelete_argsTupleScheme();
      }
    }

    private static class idxDelete_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<idxDelete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, idxDelete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetTxnId()) {
          optionals.set(1);
        }
        if (struct.isSetShard()) {
          optionals.set(2);
        }
        if (struct.isSetTuple()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequestId()) {
          oprot.writeI64(struct.requestId);
        }
        if (struct.isSetTxnId()) {
          oprot.writeI64(struct.txnId);
        }
        if (struct.isSetShard()) {
          struct.shard.write(oprot);
        }
        if (struct.isSetTuple()) {
          struct.tuple.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, idxDelete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI64();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txnId = iprot.readI64();
          struct.setTxnIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.shard = new TLZ_ShardIndex();
          struct.shard.read(iprot);
          struct.setShardIsSet(true);
        }
        if (incoming.get(3)) {
          struct.tuple = new TLZ_TupleNodeId();
          struct.tuple.read(iprot);
          struct.setTupleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class idxDelete_result implements org.apache.thrift.TBase<idxDelete_result, idxDelete_result._Fields>, java.io.Serializable, Cloneable, Comparable<idxDelete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("idxDelete_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new idxDelete_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new idxDelete_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(idxDelete_result.class, metaDataMap);
    }

    public idxDelete_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public idxDelete_result(idxDelete_result other) {
    }

    public idxDelete_result deepCopy() {
      return new idxDelete_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof idxDelete_result)
        return this.equals((idxDelete_result)that);
      return false;
    }

    public boolean equals(idxDelete_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(idxDelete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("idxDelete_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class idxDelete_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public idxDelete_resultStandardScheme getScheme() {
        return new idxDelete_resultStandardScheme();
      }
    }

    private static class idxDelete_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<idxDelete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, idxDelete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, idxDelete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class idxDelete_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public idxDelete_resultTupleScheme getScheme() {
        return new idxDelete_resultTupleScheme();
      }
    }

    private static class idxDelete_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<idxDelete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, idxDelete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, idxDelete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class idxDeleteAll_args implements org.apache.thrift.TBase<idxDeleteAll_args, idxDeleteAll_args._Fields>, java.io.Serializable, Cloneable, Comparable<idxDeleteAll_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("idxDeleteAll_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txnId", org.apache.thrift.protocol.TType.I64, (short)9);
    private static final org.apache.thrift.protocol.TField SHARD_FIELD_DESC = new org.apache.thrift.protocol.TField("shard", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField TUPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("tuples", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new idxDeleteAll_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new idxDeleteAll_argsTupleSchemeFactory();

    public long requestId; // required
    public long txnId; // required
    public TLZ_ShardIndex shard; // required
    public java.util.List<TLZ_TupleNodeId> tuples; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      TXN_ID((short)9, "txnId"),
      SHARD((short)3, "shard"),
      TUPLES((short)4, "tuples");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 9: // TXN_ID
            return TXN_ID;
          case 3: // SHARD
            return SHARD;
          case 4: // TUPLES
            return TUPLES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __TXNID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txnId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TxnId")));
      tmpMap.put(_Fields.SHARD, new org.apache.thrift.meta_data.FieldMetaData("shard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLZ_ShardIndex.class)));
      tmpMap.put(_Fields.TUPLES, new org.apache.thrift.meta_data.FieldMetaData("tuples", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLZ_TupleNodeId.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(idxDeleteAll_args.class, metaDataMap);
    }

    public idxDeleteAll_args() {
    }

    public idxDeleteAll_args(
      long requestId,
      long txnId,
      TLZ_ShardIndex shard,
      java.util.List<TLZ_TupleNodeId> tuples)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.txnId = txnId;
      setTxnIdIsSet(true);
      this.shard = shard;
      this.tuples = tuples;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public idxDeleteAll_args(idxDeleteAll_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.txnId = other.txnId;
      if (other.isSetShard()) {
        this.shard = new TLZ_ShardIndex(other.shard);
      }
      if (other.isSetTuples()) {
        java.util.List<TLZ_TupleNodeId> __this__tuples = new java.util.ArrayList<TLZ_TupleNodeId>(other.tuples.size());
        for (TLZ_TupleNodeId other_element : other.tuples) {
          __this__tuples.add(new TLZ_TupleNodeId(other_element));
        }
        this.tuples = __this__tuples;
      }
    }

    public idxDeleteAll_args deepCopy() {
      return new idxDeleteAll_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setTxnIdIsSet(false);
      this.txnId = 0;
      this.shard = null;
      this.tuples = null;
    }

    public long getRequestId() {
      return this.requestId;
    }

    public idxDeleteAll_args setRequestId(long requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public long getTxnId() {
      return this.txnId;
    }

    public idxDeleteAll_args setTxnId(long txnId) {
      this.txnId = txnId;
      setTxnIdIsSet(true);
      return this;
    }

    public void unsetTxnId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    /** Returns true if field txnId is set (has been assigned a value) and false otherwise */
    public boolean isSetTxnId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    public void setTxnIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXNID_ISSET_ID, value);
    }

    public TLZ_ShardIndex getShard() {
      return this.shard;
    }

    public idxDeleteAll_args setShard(TLZ_ShardIndex shard) {
      this.shard = shard;
      return this;
    }

    public void unsetShard() {
      this.shard = null;
    }

    /** Returns true if field shard is set (has been assigned a value) and false otherwise */
    public boolean isSetShard() {
      return this.shard != null;
    }

    public void setShardIsSet(boolean value) {
      if (!value) {
        this.shard = null;
      }
    }

    public int getTuplesSize() {
      return (this.tuples == null) ? 0 : this.tuples.size();
    }

    public java.util.Iterator<TLZ_TupleNodeId> getTuplesIterator() {
      return (this.tuples == null) ? null : this.tuples.iterator();
    }

    public void addToTuples(TLZ_TupleNodeId elem) {
      if (this.tuples == null) {
        this.tuples = new java.util.ArrayList<TLZ_TupleNodeId>();
      }
      this.tuples.add(elem);
    }

    public java.util.List<TLZ_TupleNodeId> getTuples() {
      return this.tuples;
    }

    public idxDeleteAll_args setTuples(java.util.List<TLZ_TupleNodeId> tuples) {
      this.tuples = tuples;
      return this;
    }

    public void unsetTuples() {
      this.tuples = null;
    }

    /** Returns true if field tuples is set (has been assigned a value) and false otherwise */
    public boolean isSetTuples() {
      return this.tuples != null;
    }

    public void setTuplesIsSet(boolean value) {
      if (!value) {
        this.tuples = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((java.lang.Long)value);
        }
        break;

      case TXN_ID:
        if (value == null) {
          unsetTxnId();
        } else {
          setTxnId((java.lang.Long)value);
        }
        break;

      case SHARD:
        if (value == null) {
          unsetShard();
        } else {
          setShard((TLZ_ShardIndex)value);
        }
        break;

      case TUPLES:
        if (value == null) {
          unsetTuples();
        } else {
          setTuples((java.util.List<TLZ_TupleNodeId>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return getRequestId();

      case TXN_ID:
        return getTxnId();

      case SHARD:
        return getShard();

      case TUPLES:
        return getTuples();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case TXN_ID:
        return isSetTxnId();
      case SHARD:
        return isSetShard();
      case TUPLES:
        return isSetTuples();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof idxDeleteAll_args)
        return this.equals((idxDeleteAll_args)that);
      return false;
    }

    public boolean equals(idxDeleteAll_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_txnId = true;
      boolean that_present_txnId = true;
      if (this_present_txnId || that_present_txnId) {
        if (!(this_present_txnId && that_present_txnId))
          return false;
        if (this.txnId != that.txnId)
          return false;
      }

      boolean this_present_shard = true && this.isSetShard();
      boolean that_present_shard = true && that.isSetShard();
      if (this_present_shard || that_present_shard) {
        if (!(this_present_shard && that_present_shard))
          return false;
        if (!this.shard.equals(that.shard))
          return false;
      }

      boolean this_present_tuples = true && this.isSetTuples();
      boolean that_present_tuples = true && that.isSetTuples();
      if (this_present_tuples || that_present_tuples) {
        if (!(this_present_tuples && that_present_tuples))
          return false;
        if (!this.tuples.equals(that.tuples))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestId);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txnId);

      hashCode = hashCode * 8191 + ((isSetShard()) ? 131071 : 524287);
      if (isSetShard())
        hashCode = hashCode * 8191 + shard.hashCode();

      hashCode = hashCode * 8191 + ((isSetTuples()) ? 131071 : 524287);
      if (isSetTuples())
        hashCode = hashCode * 8191 + tuples.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(idxDeleteAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTxnId()).compareTo(other.isSetTxnId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxnId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnId, other.txnId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetShard()).compareTo(other.isSetShard());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShard()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shard, other.shard);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTuples()).compareTo(other.isSetTuples());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTuples()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuples, other.tuples);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("idxDeleteAll_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("txnId:");
      sb.append(this.txnId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("shard:");
      if (this.shard == null) {
        sb.append("null");
      } else {
        sb.append(this.shard);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tuples:");
      if (this.tuples == null) {
        sb.append("null");
      } else {
        sb.append(this.tuples);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (shard != null) {
        shard.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class idxDeleteAll_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public idxDeleteAll_argsStandardScheme getScheme() {
        return new idxDeleteAll_argsStandardScheme();
      }
    }

    private static class idxDeleteAll_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<idxDeleteAll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, idxDeleteAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.requestId = iprot.readI64();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // TXN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.txnId = iprot.readI64();
                struct.setTxnIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SHARD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.shard = new TLZ_ShardIndex();
                struct.shard.read(iprot);
                struct.setShardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TUPLES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.tuples = new java.util.ArrayList<TLZ_TupleNodeId>(_list24.size);
                  TLZ_TupleNodeId _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new TLZ_TupleNodeId();
                    _elem25.read(iprot);
                    struct.tuples.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setTuplesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, idxDeleteAll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI64(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.shard != null) {
          oprot.writeFieldBegin(SHARD_FIELD_DESC);
          struct.shard.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tuples != null) {
          oprot.writeFieldBegin(TUPLES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tuples.size()));
            for (TLZ_TupleNodeId _iter27 : struct.tuples)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.txnId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class idxDeleteAll_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public idxDeleteAll_argsTupleScheme getScheme() {
        return new idxDeleteAll_argsTupleScheme();
      }
    }

    private static class idxDeleteAll_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<idxDeleteAll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, idxDeleteAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetTxnId()) {
          optionals.set(1);
        }
        if (struct.isSetShard()) {
          optionals.set(2);
        }
        if (struct.isSetTuples()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequestId()) {
          oprot.writeI64(struct.requestId);
        }
        if (struct.isSetTxnId()) {
          oprot.writeI64(struct.txnId);
        }
        if (struct.isSetShard()) {
          struct.shard.write(oprot);
        }
        if (struct.isSetTuples()) {
          {
            oprot.writeI32(struct.tuples.size());
            for (TLZ_TupleNodeId _iter28 : struct.tuples)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, idxDeleteAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI64();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txnId = iprot.readI64();
          struct.setTxnIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.shard = new TLZ_ShardIndex();
          struct.shard.read(iprot);
          struct.setShardIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.tuples = new java.util.ArrayList<TLZ_TupleNodeId>(_list29.size);
            TLZ_TupleNodeId _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new TLZ_TupleNodeId();
              _elem30.read(iprot);
              struct.tuples.add(_elem30);
            }
          }
          struct.setTuplesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class idxDeleteAll_result implements org.apache.thrift.TBase<idxDeleteAll_result, idxDeleteAll_result._Fields>, java.io.Serializable, Cloneable, Comparable<idxDeleteAll_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("idxDeleteAll_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new idxDeleteAll_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new idxDeleteAll_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(idxDeleteAll_result.class, metaDataMap);
    }

    public idxDeleteAll_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public idxDeleteAll_result(idxDeleteAll_result other) {
    }

    public idxDeleteAll_result deepCopy() {
      return new idxDeleteAll_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof idxDeleteAll_result)
        return this.equals((idxDeleteAll_result)that);
      return false;
    }

    public boolean equals(idxDeleteAll_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(idxDeleteAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("idxDeleteAll_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class idxDeleteAll_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public idxDeleteAll_resultStandardScheme getScheme() {
        return new idxDeleteAll_resultStandardScheme();
      }
    }

    private static class idxDeleteAll_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<idxDeleteAll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, idxDeleteAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, idxDeleteAll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class idxDeleteAll_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public idxDeleteAll_resultTupleScheme getScheme() {
        return new idxDeleteAll_resultTupleScheme();
      }
    }

    private static class idxDeleteAll_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<idxDeleteAll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, idxDeleteAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, idxDeleteAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class idxFind_args implements org.apache.thrift.TBase<idxFind_args, idxFind_args._Fields>, java.io.Serializable, Cloneable, Comparable<idxFind_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("idxFind_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txnId", org.apache.thrift.protocol.TType.I64, (short)9);
    private static final org.apache.thrift.protocol.TField SHARD_FIELD_DESC = new org.apache.thrift.protocol.TField("shard", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField PATTERN_FIELD_DESC = new org.apache.thrift.protocol.TField("pattern", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new idxFind_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new idxFind_argsTupleSchemeFactory();

    public long requestId; // required
    public long txnId; // required
    public TLZ_ShardIndex shard; // required
    public TLZ_TupleNodeId pattern; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      TXN_ID((short)9, "txnId"),
      SHARD((short)3, "shard"),
      PATTERN((short)4, "pattern");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 9: // TXN_ID
            return TXN_ID;
          case 3: // SHARD
            return SHARD;
          case 4: // PATTERN
            return PATTERN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __TXNID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txnId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TxnId")));
      tmpMap.put(_Fields.SHARD, new org.apache.thrift.meta_data.FieldMetaData("shard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLZ_ShardIndex.class)));
      tmpMap.put(_Fields.PATTERN, new org.apache.thrift.meta_data.FieldMetaData("pattern", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLZ_TupleNodeId.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(idxFind_args.class, metaDataMap);
    }

    public idxFind_args() {
    }

    public idxFind_args(
      long requestId,
      long txnId,
      TLZ_ShardIndex shard,
      TLZ_TupleNodeId pattern)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.txnId = txnId;
      setTxnIdIsSet(true);
      this.shard = shard;
      this.pattern = pattern;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public idxFind_args(idxFind_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.txnId = other.txnId;
      if (other.isSetShard()) {
        this.shard = new TLZ_ShardIndex(other.shard);
      }
      if (other.isSetPattern()) {
        this.pattern = new TLZ_TupleNodeId(other.pattern);
      }
    }

    public idxFind_args deepCopy() {
      return new idxFind_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setTxnIdIsSet(false);
      this.txnId = 0;
      this.shard = null;
      this.pattern = null;
    }

    public long getRequestId() {
      return this.requestId;
    }

    public idxFind_args setRequestId(long requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public long getTxnId() {
      return this.txnId;
    }

    public idxFind_args setTxnId(long txnId) {
      this.txnId = txnId;
      setTxnIdIsSet(true);
      return this;
    }

    public void unsetTxnId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    /** Returns true if field txnId is set (has been assigned a value) and false otherwise */
    public boolean isSetTxnId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    public void setTxnIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXNID_ISSET_ID, value);
    }

    public TLZ_ShardIndex getShard() {
      return this.shard;
    }

    public idxFind_args setShard(TLZ_ShardIndex shard) {
      this.shard = shard;
      return this;
    }

    public void unsetShard() {
      this.shard = null;
    }

    /** Returns true if field shard is set (has been assigned a value) and false otherwise */
    public boolean isSetShard() {
      return this.shard != null;
    }

    public void setShardIsSet(boolean value) {
      if (!value) {
        this.shard = null;
      }
    }

    public TLZ_TupleNodeId getPattern() {
      return this.pattern;
    }

    public idxFind_args setPattern(TLZ_TupleNodeId pattern) {
      this.pattern = pattern;
      return this;
    }

    public void unsetPattern() {
      this.pattern = null;
    }

    /** Returns true if field pattern is set (has been assigned a value) and false otherwise */
    public boolean isSetPattern() {
      return this.pattern != null;
    }

    public void setPatternIsSet(boolean value) {
      if (!value) {
        this.pattern = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((java.lang.Long)value);
        }
        break;

      case TXN_ID:
        if (value == null) {
          unsetTxnId();
        } else {
          setTxnId((java.lang.Long)value);
        }
        break;

      case SHARD:
        if (value == null) {
          unsetShard();
        } else {
          setShard((TLZ_ShardIndex)value);
        }
        break;

      case PATTERN:
        if (value == null) {
          unsetPattern();
        } else {
          setPattern((TLZ_TupleNodeId)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return getRequestId();

      case TXN_ID:
        return getTxnId();

      case SHARD:
        return getShard();

      case PATTERN:
        return getPattern();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case TXN_ID:
        return isSetTxnId();
      case SHARD:
        return isSetShard();
      case PATTERN:
        return isSetPattern();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof idxFind_args)
        return this.equals((idxFind_args)that);
      return false;
    }

    public boolean equals(idxFind_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_txnId = true;
      boolean that_present_txnId = true;
      if (this_present_txnId || that_present_txnId) {
        if (!(this_present_txnId && that_present_txnId))
          return false;
        if (this.txnId != that.txnId)
          return false;
      }

      boolean this_present_shard = true && this.isSetShard();
      boolean that_present_shard = true && that.isSetShard();
      if (this_present_shard || that_present_shard) {
        if (!(this_present_shard && that_present_shard))
          return false;
        if (!this.shard.equals(that.shard))
          return false;
      }

      boolean this_present_pattern = true && this.isSetPattern();
      boolean that_present_pattern = true && that.isSetPattern();
      if (this_present_pattern || that_present_pattern) {
        if (!(this_present_pattern && that_present_pattern))
          return false;
        if (!this.pattern.equals(that.pattern))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestId);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txnId);

      hashCode = hashCode * 8191 + ((isSetShard()) ? 131071 : 524287);
      if (isSetShard())
        hashCode = hashCode * 8191 + shard.hashCode();

      hashCode = hashCode * 8191 + ((isSetPattern()) ? 131071 : 524287);
      if (isSetPattern())
        hashCode = hashCode * 8191 + pattern.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(idxFind_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTxnId()).compareTo(other.isSetTxnId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxnId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnId, other.txnId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetShard()).compareTo(other.isSetShard());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetShard()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shard, other.shard);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPattern()).compareTo(other.isSetPattern());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPattern()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pattern, other.pattern);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("idxFind_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("txnId:");
      sb.append(this.txnId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("shard:");
      if (this.shard == null) {
        sb.append("null");
      } else {
        sb.append(this.shard);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pattern:");
      if (this.pattern == null) {
        sb.append("null");
      } else {
        sb.append(this.pattern);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (shard != null) {
        shard.validate();
      }
      if (pattern != null) {
        pattern.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class idxFind_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public idxFind_argsStandardScheme getScheme() {
        return new idxFind_argsStandardScheme();
      }
    }

    private static class idxFind_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<idxFind_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, idxFind_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.requestId = iprot.readI64();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // TXN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.txnId = iprot.readI64();
                struct.setTxnIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SHARD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.shard = new TLZ_ShardIndex();
                struct.shard.read(iprot);
                struct.setShardIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PATTERN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pattern = new TLZ_TupleNodeId();
                struct.pattern.read(iprot);
                struct.setPatternIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, idxFind_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI64(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.shard != null) {
          oprot.writeFieldBegin(SHARD_FIELD_DESC);
          struct.shard.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pattern != null) {
          oprot.writeFieldBegin(PATTERN_FIELD_DESC);
          struct.pattern.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.txnId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class idxFind_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public idxFind_argsTupleScheme getScheme() {
        return new idxFind_argsTupleScheme();
      }
    }

    private static class idxFind_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<idxFind_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, idxFind_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetTxnId()) {
          optionals.set(1);
        }
        if (struct.isSetShard()) {
          optionals.set(2);
        }
        if (struct.isSetPattern()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetRequestId()) {
          oprot.writeI64(struct.requestId);
        }
        if (struct.isSetTxnId()) {
          oprot.writeI64(struct.txnId);
        }
        if (struct.isSetShard()) {
          struct.shard.write(oprot);
        }
        if (struct.isSetPattern()) {
          struct.pattern.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, idxFind_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI64();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txnId = iprot.readI64();
          struct.setTxnIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.shard = new TLZ_ShardIndex();
          struct.shard.read(iprot);
          struct.setShardIsSet(true);
        }
        if (incoming.get(3)) {
          struct.pattern = new TLZ_TupleNodeId();
          struct.pattern.read(iprot);
          struct.setPatternIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class idxFind_result implements org.apache.thrift.TBase<idxFind_result, idxFind_result._Fields>, java.io.Serializable, Cloneable, Comparable<idxFind_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("idxFind_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new idxFind_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new idxFind_resultTupleSchemeFactory();

    public java.util.List<TLZ_TupleNodeId> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLZ_TupleNodeId.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(idxFind_result.class, metaDataMap);
    }

    public idxFind_result() {
    }

    public idxFind_result(
      java.util.List<TLZ_TupleNodeId> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public idxFind_result(idxFind_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TLZ_TupleNodeId> __this__success = new java.util.ArrayList<TLZ_TupleNodeId>(other.success.size());
        for (TLZ_TupleNodeId other_element : other.success) {
          __this__success.add(new TLZ_TupleNodeId(other_element));
        }
        this.success = __this__success;
      }
    }

    public idxFind_result deepCopy() {
      return new idxFind_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TLZ_TupleNodeId> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TLZ_TupleNodeId elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TLZ_TupleNodeId>();
      }
      this.success.add(elem);
    }

    public java.util.List<TLZ_TupleNodeId> getSuccess() {
      return this.success;
    }

    public idxFind_result setSuccess(java.util.List<TLZ_TupleNodeId> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TLZ_TupleNodeId>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof idxFind_result)
        return this.equals((idxFind_result)that);
      return false;
    }

    public boolean equals(idxFind_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(idxFind_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("idxFind_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class idxFind_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public idxFind_resultStandardScheme getScheme() {
        return new idxFind_resultStandardScheme();
      }
    }

    private static class idxFind_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<idxFind_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, idxFind_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TLZ_TupleNodeId>(_list32.size);
                  TLZ_TupleNodeId _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new TLZ_TupleNodeId();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, idxFind_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TLZ_TupleNodeId _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class idxFind_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public idxFind_resultTupleScheme getScheme() {
        return new idxFind_resultTupleScheme();
      }
    }

    private static class idxFind_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<idxFind_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, idxFind_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TLZ_TupleNodeId _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, idxFind_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TLZ_TupleNodeId>(_list37.size);
            TLZ_TupleNodeId _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new TLZ_TupleNodeId();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
