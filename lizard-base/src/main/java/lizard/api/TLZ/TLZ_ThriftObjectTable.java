/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package lizard.api.TLZ;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings("all")
public class TLZ_ThriftObjectTable {

  public interface Iface extends TxnCtl.Iface {

    public long allocNodeId(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node) throws org.apache.thrift.TException;

    public long findByTerm(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node) throws org.apache.thrift.TException;

    public org.apache.jena.riot.thrift.wire.RDF_Term findById(long requestId, long txnId, long id) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends TxnCtl .AsyncIface {

    public void allocNodeId(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findByTerm(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findById(long requestId, long txnId, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends TxnCtl.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long allocNodeId(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node) throws org.apache.thrift.TException
    {
      send_allocNodeId(requestId, txnId, node);
      return recv_allocNodeId();
    }

    public void send_allocNodeId(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node) throws org.apache.thrift.TException
    {
      allocNodeId_args args = new allocNodeId_args();
      args.setRequestId(requestId);
      args.setTxnId(txnId);
      args.setNode(node);
      sendBase("allocNodeId", args);
    }

    public long recv_allocNodeId() throws org.apache.thrift.TException
    {
      allocNodeId_result result = new allocNodeId_result();
      receiveBase(result, "allocNodeId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "allocNodeId failed: unknown result");
    }

    public long findByTerm(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node) throws org.apache.thrift.TException
    {
      send_findByTerm(requestId, txnId, node);
      return recv_findByTerm();
    }

    public void send_findByTerm(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node) throws org.apache.thrift.TException
    {
      findByTerm_args args = new findByTerm_args();
      args.setRequestId(requestId);
      args.setTxnId(txnId);
      args.setNode(node);
      sendBase("findByTerm", args);
    }

    public long recv_findByTerm() throws org.apache.thrift.TException
    {
      findByTerm_result result = new findByTerm_result();
      receiveBase(result, "findByTerm");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findByTerm failed: unknown result");
    }

    public org.apache.jena.riot.thrift.wire.RDF_Term findById(long requestId, long txnId, long id) throws org.apache.thrift.TException
    {
      send_findById(requestId, txnId, id);
      return recv_findById();
    }

    public void send_findById(long requestId, long txnId, long id) throws org.apache.thrift.TException
    {
      findById_args args = new findById_args();
      args.setRequestId(requestId);
      args.setTxnId(txnId);
      args.setId(id);
      sendBase("findById", args);
    }

    public org.apache.jena.riot.thrift.wire.RDF_Term recv_findById() throws org.apache.thrift.TException
    {
      findById_result result = new findById_result();
      receiveBase(result, "findById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findById failed: unknown result");
    }

  }
  public static class AsyncClient extends TxnCtl.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void allocNodeId(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      allocNodeId_call method_call = new allocNodeId_call(requestId, txnId, node, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class allocNodeId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long requestId;
      private long txnId;
      private org.apache.jena.riot.thrift.wire.RDF_Term node;
      public allocNodeId_call(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.txnId = txnId;
        this.node = node;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("allocNodeId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        allocNodeId_args args = new allocNodeId_args();
        args.setRequestId(requestId);
        args.setTxnId(txnId);
        args.setNode(node);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_allocNodeId();
      }
    }

    public void findByTerm(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findByTerm_call method_call = new findByTerm_call(requestId, txnId, node, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findByTerm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long requestId;
      private long txnId;
      private org.apache.jena.riot.thrift.wire.RDF_Term node;
      public findByTerm_call(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.txnId = txnId;
        this.node = node;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findByTerm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findByTerm_args args = new findByTerm_args();
        args.setRequestId(requestId);
        args.setTxnId(txnId);
        args.setNode(node);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findByTerm();
      }
    }

    public void findById(long requestId, long txnId, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findById_call method_call = new findById_call(requestId, txnId, id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long requestId;
      private long txnId;
      private long id;
      public findById_call(long requestId, long txnId, long id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.txnId = txnId;
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findById_args args = new findById_args();
        args.setRequestId(requestId);
        args.setTxnId(txnId);
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.jena.riot.thrift.wire.RDF_Term getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findById();
      }
    }

  }

  public static class Processor<I extends Iface> extends TxnCtl.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("allocNodeId", new allocNodeId());
      processMap.put("findByTerm", new findByTerm());
      processMap.put("findById", new findById());
      return processMap;
    }

    public static class allocNodeId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, allocNodeId_args> {
      public allocNodeId() {
        super("allocNodeId");
      }

      public allocNodeId_args getEmptyArgsInstance() {
        return new allocNodeId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public allocNodeId_result getResult(I iface, allocNodeId_args args) throws org.apache.thrift.TException {
        allocNodeId_result result = new allocNodeId_result();
        result.success = iface.allocNodeId(args.requestId, args.txnId, args.node);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findByTerm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findByTerm_args> {
      public findByTerm() {
        super("findByTerm");
      }

      public findByTerm_args getEmptyArgsInstance() {
        return new findByTerm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findByTerm_result getResult(I iface, findByTerm_args args) throws org.apache.thrift.TException {
        findByTerm_result result = new findByTerm_result();
        result.success = iface.findByTerm(args.requestId, args.txnId, args.node);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findById_args> {
      public findById() {
        super("findById");
      }

      public findById_args getEmptyArgsInstance() {
        return new findById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findById_result getResult(I iface, findById_args args) throws org.apache.thrift.TException {
        findById_result result = new findById_result();
        result.success = iface.findById(args.requestId, args.txnId, args.id);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends TxnCtl.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("allocNodeId", new allocNodeId());
      processMap.put("findByTerm", new findByTerm());
      processMap.put("findById", new findById());
      return processMap;
    }

    public static class allocNodeId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, allocNodeId_args, Long> {
      public allocNodeId() {
        super("allocNodeId");
      }

      public allocNodeId_args getEmptyArgsInstance() {
        return new allocNodeId_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            allocNodeId_result result = new allocNodeId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            allocNodeId_result result = new allocNodeId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, allocNodeId_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.allocNodeId(args.requestId, args.txnId, args.node,resultHandler);
      }
    }

    public static class findByTerm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findByTerm_args, Long> {
      public findByTerm() {
        super("findByTerm");
      }

      public findByTerm_args getEmptyArgsInstance() {
        return new findByTerm_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            findByTerm_result result = new findByTerm_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findByTerm_result result = new findByTerm_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findByTerm_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.findByTerm(args.requestId, args.txnId, args.node,resultHandler);
      }
    }

    public static class findById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findById_args, org.apache.jena.riot.thrift.wire.RDF_Term> {
      public findById() {
        super("findById");
      }

      public findById_args getEmptyArgsInstance() {
        return new findById_args();
      }

      public AsyncMethodCallback<org.apache.jena.riot.thrift.wire.RDF_Term> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<org.apache.jena.riot.thrift.wire.RDF_Term>() { 
          public void onComplete(org.apache.jena.riot.thrift.wire.RDF_Term o) {
            findById_result result = new findById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findById_result result = new findById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findById_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.jena.riot.thrift.wire.RDF_Term> resultHandler) throws TException {
        iface.findById(args.requestId, args.txnId, args.id,resultHandler);
      }
    }

  }

  public static class allocNodeId_args implements org.apache.thrift.TBase<allocNodeId_args, allocNodeId_args._Fields>, java.io.Serializable, Cloneable, Comparable<allocNodeId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("allocNodeId_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txnId", org.apache.thrift.protocol.TType.I64, (short)9);
    private static final org.apache.thrift.protocol.TField NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("node", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new allocNodeId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new allocNodeId_argsTupleSchemeFactory());
    }

    public long requestId; // required
    public long txnId; // required
    public org.apache.jena.riot.thrift.wire.RDF_Term node; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      TXN_ID((short)9, "txnId"),
      NODE((short)3, "node");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 9: // TXN_ID
            return TXN_ID;
          case 3: // NODE
            return NODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __TXNID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txnId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TxnId")));
      tmpMap.put(_Fields.NODE, new org.apache.thrift.meta_data.FieldMetaData("node", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.jena.riot.thrift.wire.RDF_Term.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(allocNodeId_args.class, metaDataMap);
    }

    public allocNodeId_args() {
    }

    public allocNodeId_args(
      long requestId,
      long txnId,
      org.apache.jena.riot.thrift.wire.RDF_Term node)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.txnId = txnId;
      setTxnIdIsSet(true);
      this.node = node;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public allocNodeId_args(allocNodeId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.txnId = other.txnId;
      if (other.isSetNode()) {
        this.node = new org.apache.jena.riot.thrift.wire.RDF_Term(other.node);
      }
    }

    public allocNodeId_args deepCopy() {
      return new allocNodeId_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setTxnIdIsSet(false);
      this.txnId = 0;
      this.node = null;
    }

    public long getRequestId() {
      return this.requestId;
    }

    public allocNodeId_args setRequestId(long requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public long getTxnId() {
      return this.txnId;
    }

    public allocNodeId_args setTxnId(long txnId) {
      this.txnId = txnId;
      setTxnIdIsSet(true);
      return this;
    }

    public void unsetTxnId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    /** Returns true if field txnId is set (has been assigned a value) and false otherwise */
    public boolean isSetTxnId() {
      return EncodingUtils.testBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    public void setTxnIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TXNID_ISSET_ID, value);
    }

    public org.apache.jena.riot.thrift.wire.RDF_Term getNode() {
      return this.node;
    }

    public allocNodeId_args setNode(org.apache.jena.riot.thrift.wire.RDF_Term node) {
      this.node = node;
      return this;
    }

    public void unsetNode() {
      this.node = null;
    }

    /** Returns true if field node is set (has been assigned a value) and false otherwise */
    public boolean isSetNode() {
      return this.node != null;
    }

    public void setNodeIsSet(boolean value) {
      if (!value) {
        this.node = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Long)value);
        }
        break;

      case TXN_ID:
        if (value == null) {
          unsetTxnId();
        } else {
          setTxnId((Long)value);
        }
        break;

      case NODE:
        if (value == null) {
          unsetNode();
        } else {
          setNode((org.apache.jena.riot.thrift.wire.RDF_Term)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Long.valueOf(getRequestId());

      case TXN_ID:
        return Long.valueOf(getTxnId());

      case NODE:
        return getNode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case TXN_ID:
        return isSetTxnId();
      case NODE:
        return isSetNode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof allocNodeId_args)
        return this.equals((allocNodeId_args)that);
      return false;
    }

    public boolean equals(allocNodeId_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_txnId = true;
      boolean that_present_txnId = true;
      if (this_present_txnId || that_present_txnId) {
        if (!(this_present_txnId && that_present_txnId))
          return false;
        if (this.txnId != that.txnId)
          return false;
      }

      boolean this_present_node = true && this.isSetNode();
      boolean that_present_node = true && that.isSetNode();
      if (this_present_node || that_present_node) {
        if (!(this_present_node && that_present_node))
          return false;
        if (!this.node.equals(that.node))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(allocNodeId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxnId()).compareTo(other.isSetTxnId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxnId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnId, other.txnId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNode()).compareTo(other.isSetNode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node, other.node);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("allocNodeId_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("txnId:");
      sb.append(this.txnId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("node:");
      if (this.node == null) {
        sb.append("null");
      } else {
        sb.append(this.node);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class allocNodeId_argsStandardSchemeFactory implements SchemeFactory {
      public allocNodeId_argsStandardScheme getScheme() {
        return new allocNodeId_argsStandardScheme();
      }
    }

    private static class allocNodeId_argsStandardScheme extends StandardScheme<allocNodeId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, allocNodeId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.requestId = iprot.readI64();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // TXN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.txnId = iprot.readI64();
                struct.setTxnIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.node = new org.apache.jena.riot.thrift.wire.RDF_Term();
                struct.node.read(iprot);
                struct.setNodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, allocNodeId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI64(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.node != null) {
          oprot.writeFieldBegin(NODE_FIELD_DESC);
          struct.node.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.txnId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class allocNodeId_argsTupleSchemeFactory implements SchemeFactory {
      public allocNodeId_argsTupleScheme getScheme() {
        return new allocNodeId_argsTupleScheme();
      }
    }

    private static class allocNodeId_argsTupleScheme extends TupleScheme<allocNodeId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, allocNodeId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetTxnId()) {
          optionals.set(1);
        }
        if (struct.isSetNode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRequestId()) {
          oprot.writeI64(struct.requestId);
        }
        if (struct.isSetTxnId()) {
          oprot.writeI64(struct.txnId);
        }
        if (struct.isSetNode()) {
          struct.node.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, allocNodeId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI64();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txnId = iprot.readI64();
          struct.setTxnIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.node = new org.apache.jena.riot.thrift.wire.RDF_Term();
          struct.node.read(iprot);
          struct.setNodeIsSet(true);
        }
      }
    }

  }

  public static class allocNodeId_result implements org.apache.thrift.TBase<allocNodeId_result, allocNodeId_result._Fields>, java.io.Serializable, Cloneable, Comparable<allocNodeId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("allocNodeId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new allocNodeId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new allocNodeId_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(allocNodeId_result.class, metaDataMap);
    }

    public allocNodeId_result() {
    }

    public allocNodeId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public allocNodeId_result(allocNodeId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public allocNodeId_result deepCopy() {
      return new allocNodeId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public allocNodeId_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof allocNodeId_result)
        return this.equals((allocNodeId_result)that);
      return false;
    }

    public boolean equals(allocNodeId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(allocNodeId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("allocNodeId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class allocNodeId_resultStandardSchemeFactory implements SchemeFactory {
      public allocNodeId_resultStandardScheme getScheme() {
        return new allocNodeId_resultStandardScheme();
      }
    }

    private static class allocNodeId_resultStandardScheme extends StandardScheme<allocNodeId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, allocNodeId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, allocNodeId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class allocNodeId_resultTupleSchemeFactory implements SchemeFactory {
      public allocNodeId_resultTupleScheme getScheme() {
        return new allocNodeId_resultTupleScheme();
      }
    }

    private static class allocNodeId_resultTupleScheme extends TupleScheme<allocNodeId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, allocNodeId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, allocNodeId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findByTerm_args implements org.apache.thrift.TBase<findByTerm_args, findByTerm_args._Fields>, java.io.Serializable, Cloneable, Comparable<findByTerm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findByTerm_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txnId", org.apache.thrift.protocol.TType.I64, (short)9);
    private static final org.apache.thrift.protocol.TField NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("node", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findByTerm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findByTerm_argsTupleSchemeFactory());
    }

    public long requestId; // required
    public long txnId; // required
    public org.apache.jena.riot.thrift.wire.RDF_Term node; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      TXN_ID((short)9, "txnId"),
      NODE((short)3, "node");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 9: // TXN_ID
            return TXN_ID;
          case 3: // NODE
            return NODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __TXNID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txnId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TxnId")));
      tmpMap.put(_Fields.NODE, new org.apache.thrift.meta_data.FieldMetaData("node", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.jena.riot.thrift.wire.RDF_Term.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findByTerm_args.class, metaDataMap);
    }

    public findByTerm_args() {
    }

    public findByTerm_args(
      long requestId,
      long txnId,
      org.apache.jena.riot.thrift.wire.RDF_Term node)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.txnId = txnId;
      setTxnIdIsSet(true);
      this.node = node;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findByTerm_args(findByTerm_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.txnId = other.txnId;
      if (other.isSetNode()) {
        this.node = new org.apache.jena.riot.thrift.wire.RDF_Term(other.node);
      }
    }

    public findByTerm_args deepCopy() {
      return new findByTerm_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setTxnIdIsSet(false);
      this.txnId = 0;
      this.node = null;
    }

    public long getRequestId() {
      return this.requestId;
    }

    public findByTerm_args setRequestId(long requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public long getTxnId() {
      return this.txnId;
    }

    public findByTerm_args setTxnId(long txnId) {
      this.txnId = txnId;
      setTxnIdIsSet(true);
      return this;
    }

    public void unsetTxnId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    /** Returns true if field txnId is set (has been assigned a value) and false otherwise */
    public boolean isSetTxnId() {
      return EncodingUtils.testBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    public void setTxnIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TXNID_ISSET_ID, value);
    }

    public org.apache.jena.riot.thrift.wire.RDF_Term getNode() {
      return this.node;
    }

    public findByTerm_args setNode(org.apache.jena.riot.thrift.wire.RDF_Term node) {
      this.node = node;
      return this;
    }

    public void unsetNode() {
      this.node = null;
    }

    /** Returns true if field node is set (has been assigned a value) and false otherwise */
    public boolean isSetNode() {
      return this.node != null;
    }

    public void setNodeIsSet(boolean value) {
      if (!value) {
        this.node = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Long)value);
        }
        break;

      case TXN_ID:
        if (value == null) {
          unsetTxnId();
        } else {
          setTxnId((Long)value);
        }
        break;

      case NODE:
        if (value == null) {
          unsetNode();
        } else {
          setNode((org.apache.jena.riot.thrift.wire.RDF_Term)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Long.valueOf(getRequestId());

      case TXN_ID:
        return Long.valueOf(getTxnId());

      case NODE:
        return getNode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case TXN_ID:
        return isSetTxnId();
      case NODE:
        return isSetNode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findByTerm_args)
        return this.equals((findByTerm_args)that);
      return false;
    }

    public boolean equals(findByTerm_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_txnId = true;
      boolean that_present_txnId = true;
      if (this_present_txnId || that_present_txnId) {
        if (!(this_present_txnId && that_present_txnId))
          return false;
        if (this.txnId != that.txnId)
          return false;
      }

      boolean this_present_node = true && this.isSetNode();
      boolean that_present_node = true && that.isSetNode();
      if (this_present_node || that_present_node) {
        if (!(this_present_node && that_present_node))
          return false;
        if (!this.node.equals(that.node))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findByTerm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxnId()).compareTo(other.isSetTxnId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxnId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnId, other.txnId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNode()).compareTo(other.isSetNode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node, other.node);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findByTerm_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("txnId:");
      sb.append(this.txnId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("node:");
      if (this.node == null) {
        sb.append("null");
      } else {
        sb.append(this.node);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findByTerm_argsStandardSchemeFactory implements SchemeFactory {
      public findByTerm_argsStandardScheme getScheme() {
        return new findByTerm_argsStandardScheme();
      }
    }

    private static class findByTerm_argsStandardScheme extends StandardScheme<findByTerm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findByTerm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.requestId = iprot.readI64();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // TXN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.txnId = iprot.readI64();
                struct.setTxnIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.node = new org.apache.jena.riot.thrift.wire.RDF_Term();
                struct.node.read(iprot);
                struct.setNodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findByTerm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI64(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.node != null) {
          oprot.writeFieldBegin(NODE_FIELD_DESC);
          struct.node.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.txnId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findByTerm_argsTupleSchemeFactory implements SchemeFactory {
      public findByTerm_argsTupleScheme getScheme() {
        return new findByTerm_argsTupleScheme();
      }
    }

    private static class findByTerm_argsTupleScheme extends TupleScheme<findByTerm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findByTerm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetTxnId()) {
          optionals.set(1);
        }
        if (struct.isSetNode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRequestId()) {
          oprot.writeI64(struct.requestId);
        }
        if (struct.isSetTxnId()) {
          oprot.writeI64(struct.txnId);
        }
        if (struct.isSetNode()) {
          struct.node.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findByTerm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI64();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txnId = iprot.readI64();
          struct.setTxnIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.node = new org.apache.jena.riot.thrift.wire.RDF_Term();
          struct.node.read(iprot);
          struct.setNodeIsSet(true);
        }
      }
    }

  }

  public static class findByTerm_result implements org.apache.thrift.TBase<findByTerm_result, findByTerm_result._Fields>, java.io.Serializable, Cloneable, Comparable<findByTerm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findByTerm_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findByTerm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findByTerm_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findByTerm_result.class, metaDataMap);
    }

    public findByTerm_result() {
    }

    public findByTerm_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findByTerm_result(findByTerm_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public findByTerm_result deepCopy() {
      return new findByTerm_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public findByTerm_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findByTerm_result)
        return this.equals((findByTerm_result)that);
      return false;
    }

    public boolean equals(findByTerm_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findByTerm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findByTerm_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findByTerm_resultStandardSchemeFactory implements SchemeFactory {
      public findByTerm_resultStandardScheme getScheme() {
        return new findByTerm_resultStandardScheme();
      }
    }

    private static class findByTerm_resultStandardScheme extends StandardScheme<findByTerm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findByTerm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findByTerm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findByTerm_resultTupleSchemeFactory implements SchemeFactory {
      public findByTerm_resultTupleScheme getScheme() {
        return new findByTerm_resultTupleScheme();
      }
    }

    private static class findByTerm_resultTupleScheme extends TupleScheme<findByTerm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findByTerm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findByTerm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findById_args implements org.apache.thrift.TBase<findById_args, findById_args._Fields>, java.io.Serializable, Cloneable, Comparable<findById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findById_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txnId", org.apache.thrift.protocol.TType.I64, (short)9);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findById_argsTupleSchemeFactory());
    }

    public long requestId; // required
    public long txnId; // required
    public long id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      TXN_ID((short)9, "txnId"),
      ID((short)3, "id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 9: // TXN_ID
            return TXN_ID;
          case 3: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __TXNID_ISSET_ID = 1;
    private static final int __ID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txnId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TxnId")));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findById_args.class, metaDataMap);
    }

    public findById_args() {
    }

    public findById_args(
      long requestId,
      long txnId,
      long id)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.txnId = txnId;
      setTxnIdIsSet(true);
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findById_args(findById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.txnId = other.txnId;
      this.id = other.id;
    }

    public findById_args deepCopy() {
      return new findById_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setTxnIdIsSet(false);
      this.txnId = 0;
      setIdIsSet(false);
      this.id = 0;
    }

    public long getRequestId() {
      return this.requestId;
    }

    public findById_args setRequestId(long requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public long getTxnId() {
      return this.txnId;
    }

    public findById_args setTxnId(long txnId) {
      this.txnId = txnId;
      setTxnIdIsSet(true);
      return this;
    }

    public void unsetTxnId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    /** Returns true if field txnId is set (has been assigned a value) and false otherwise */
    public boolean isSetTxnId() {
      return EncodingUtils.testBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    public void setTxnIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TXNID_ISSET_ID, value);
    }

    public long getId() {
      return this.id;
    }

    public findById_args setId(long id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((Long)value);
        }
        break;

      case TXN_ID:
        if (value == null) {
          unsetTxnId();
        } else {
          setTxnId((Long)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return Long.valueOf(getRequestId());

      case TXN_ID:
        return Long.valueOf(getTxnId());

      case ID:
        return Long.valueOf(getId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case TXN_ID:
        return isSetTxnId();
      case ID:
        return isSetId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findById_args)
        return this.equals((findById_args)that);
      return false;
    }

    public boolean equals(findById_args that) {
      if (that == null)
        return false;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_txnId = true;
      boolean that_present_txnId = true;
      if (this_present_txnId || that_present_txnId) {
        if (!(this_present_txnId && that_present_txnId))
          return false;
        if (this.txnId != that.txnId)
          return false;
      }

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTxnId()).compareTo(other.isSetTxnId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxnId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnId, other.txnId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findById_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("txnId:");
      sb.append(this.txnId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findById_argsStandardSchemeFactory implements SchemeFactory {
      public findById_argsStandardScheme getScheme() {
        return new findById_argsStandardScheme();
      }
    }

    private static class findById_argsStandardScheme extends StandardScheme<findById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.requestId = iprot.readI64();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // TXN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.txnId = iprot.readI64();
                struct.setTxnIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI64(struct.requestId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI64(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.txnId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findById_argsTupleSchemeFactory implements SchemeFactory {
      public findById_argsTupleScheme getScheme() {
        return new findById_argsTupleScheme();
      }
    }

    private static class findById_argsTupleScheme extends TupleScheme<findById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetTxnId()) {
          optionals.set(1);
        }
        if (struct.isSetId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRequestId()) {
          oprot.writeI64(struct.requestId);
        }
        if (struct.isSetTxnId()) {
          oprot.writeI64(struct.txnId);
        }
        if (struct.isSetId()) {
          oprot.writeI64(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI64();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txnId = iprot.readI64();
          struct.setTxnIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.id = iprot.readI64();
          struct.setIdIsSet(true);
        }
      }
    }

  }

  public static class findById_result implements org.apache.thrift.TBase<findById_result, findById_result._Fields>, java.io.Serializable, Cloneable, Comparable<findById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findById_resultTupleSchemeFactory());
    }

    public org.apache.jena.riot.thrift.wire.RDF_Term success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.jena.riot.thrift.wire.RDF_Term.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findById_result.class, metaDataMap);
    }

    public findById_result() {
    }

    public findById_result(
      org.apache.jena.riot.thrift.wire.RDF_Term success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findById_result(findById_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.jena.riot.thrift.wire.RDF_Term(other.success);
      }
    }

    public findById_result deepCopy() {
      return new findById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public org.apache.jena.riot.thrift.wire.RDF_Term getSuccess() {
      return this.success;
    }

    public findById_result setSuccess(org.apache.jena.riot.thrift.wire.RDF_Term success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.jena.riot.thrift.wire.RDF_Term)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findById_result)
        return this.equals((findById_result)that);
      return false;
    }

    public boolean equals(findById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(findById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findById_resultStandardSchemeFactory implements SchemeFactory {
      public findById_resultStandardScheme getScheme() {
        return new findById_resultStandardScheme();
      }
    }

    private static class findById_resultStandardScheme extends StandardScheme<findById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.jena.riot.thrift.wire.RDF_Term();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findById_resultTupleSchemeFactory implements SchemeFactory {
      public findById_resultTupleScheme getScheme() {
        return new findById_resultTupleScheme();
      }
    }

    private static class findById_resultTupleScheme extends TupleScheme<findById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new org.apache.jena.riot.thrift.wire.RDF_Term();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
