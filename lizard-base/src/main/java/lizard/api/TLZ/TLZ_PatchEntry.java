/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package lizard.api.TLZ;

@SuppressWarnings("all")
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-06-17")
public class TLZ_PatchEntry implements org.apache.thrift.TBase<TLZ_PatchEntry, TLZ_PatchEntry._Fields>, java.io.Serializable, Cloneable, Comparable<TLZ_PatchEntry> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TLZ_PatchEntry");

  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TUPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("tuple", org.apache.thrift.protocol.TType.STRUCT, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TLZ_PatchEntryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TLZ_PatchEntryTupleSchemeFactory();

  /**
   * 
   * @see TLZ_PatchAction
   */
  public TLZ_PatchAction action; // required
  public TLZ_TupleNodeId tuple; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TLZ_PatchAction
     */
    ACTION((short)1, "action"),
    TUPLE((short)9, "tuple");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTION
          return ACTION;
        case 9: // TUPLE
          return TUPLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TLZ_PatchAction.class)));
    tmpMap.put(_Fields.TUPLE, new org.apache.thrift.meta_data.FieldMetaData("tuple", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLZ_TupleNodeId.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TLZ_PatchEntry.class, metaDataMap);
  }

  public TLZ_PatchEntry() {
  }

  public TLZ_PatchEntry(
    TLZ_PatchAction action,
    TLZ_TupleNodeId tuple)
  {
    this();
    this.action = action;
    this.tuple = tuple;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TLZ_PatchEntry(TLZ_PatchEntry other) {
    if (other.isSetAction()) {
      this.action = other.action;
    }
    if (other.isSetTuple()) {
      this.tuple = new TLZ_TupleNodeId(other.tuple);
    }
  }

  public TLZ_PatchEntry deepCopy() {
    return new TLZ_PatchEntry(this);
  }

  @Override
  public void clear() {
    this.action = null;
    this.tuple = null;
  }

  /**
   * 
   * @see TLZ_PatchAction
   */
  public TLZ_PatchAction getAction() {
    return this.action;
  }

  /**
   * 
   * @see TLZ_PatchAction
   */
  public TLZ_PatchEntry setAction(TLZ_PatchAction action) {
    this.action = action;
    return this;
  }

  public void unsetAction() {
    this.action = null;
  }

  /** Returns true if field action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return this.action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      this.action = null;
    }
  }

  public TLZ_TupleNodeId getTuple() {
    return this.tuple;
  }

  public TLZ_PatchEntry setTuple(TLZ_TupleNodeId tuple) {
    this.tuple = tuple;
    return this;
  }

  public void unsetTuple() {
    this.tuple = null;
  }

  /** Returns true if field tuple is set (has been assigned a value) and false otherwise */
  public boolean isSetTuple() {
    return this.tuple != null;
  }

  public void setTupleIsSet(boolean value) {
    if (!value) {
      this.tuple = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((TLZ_PatchAction)value);
      }
      break;

    case TUPLE:
      if (value == null) {
        unsetTuple();
      } else {
        setTuple((TLZ_TupleNodeId)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTION:
      return getAction();

    case TUPLE:
      return getTuple();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACTION:
      return isSetAction();
    case TUPLE:
      return isSetTuple();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TLZ_PatchEntry)
      return this.equals((TLZ_PatchEntry)that);
    return false;
  }

  public boolean equals(TLZ_PatchEntry that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_action = true && this.isSetAction();
    boolean that_present_action = true && that.isSetAction();
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action))
        return false;
      if (!this.action.equals(that.action))
        return false;
    }

    boolean this_present_tuple = true && this.isSetTuple();
    boolean that_present_tuple = true && that.isSetTuple();
    if (this_present_tuple || that_present_tuple) {
      if (!(this_present_tuple && that_present_tuple))
        return false;
      if (!this.tuple.equals(that.tuple))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAction()) ? 131071 : 524287);
    if (isSetAction())
      hashCode = hashCode * 8191 + action.getValue();

    hashCode = hashCode * 8191 + ((isSetTuple()) ? 131071 : 524287);
    if (isSetTuple())
      hashCode = hashCode * 8191 + tuple.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TLZ_PatchEntry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTuple()).compareTo(other.isSetTuple());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTuple()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tuple, other.tuple);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TLZ_PatchEntry(");
    boolean first = true;

    sb.append("action:");
    if (this.action == null) {
      sb.append("null");
    } else {
      sb.append(this.action);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tuple:");
    if (this.tuple == null) {
      sb.append("null");
    } else {
      sb.append(this.tuple);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (action == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'action' was not present! Struct: " + toString());
    }
    if (tuple == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'tuple' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (tuple != null) {
      tuple.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TLZ_PatchEntryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TLZ_PatchEntryStandardScheme getScheme() {
      return new TLZ_PatchEntryStandardScheme();
    }
  }

  private static class TLZ_PatchEntryStandardScheme extends org.apache.thrift.scheme.StandardScheme<TLZ_PatchEntry> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TLZ_PatchEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.action = lizard.api.TLZ.TLZ_PatchAction.findByValue(iprot.readI32());
              struct.setActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TUPLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tuple = new TLZ_TupleNodeId();
              struct.tuple.read(iprot);
              struct.setTupleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TLZ_PatchEntry struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.action != null) {
        oprot.writeFieldBegin(ACTION_FIELD_DESC);
        oprot.writeI32(struct.action.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.tuple != null) {
        oprot.writeFieldBegin(TUPLE_FIELD_DESC);
        struct.tuple.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TLZ_PatchEntryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TLZ_PatchEntryTupleScheme getScheme() {
      return new TLZ_PatchEntryTupleScheme();
    }
  }

  private static class TLZ_PatchEntryTupleScheme extends org.apache.thrift.scheme.TupleScheme<TLZ_PatchEntry> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TLZ_PatchEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.action.getValue());
      struct.tuple.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TLZ_PatchEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.action = lizard.api.TLZ.TLZ_PatchAction.findByValue(iprot.readI32());
      struct.setActionIsSet(true);
      struct.tuple = new TLZ_TupleNodeId();
      struct.tuple.read(iprot);
      struct.setTupleIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

