/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package lizard.api.TLZ;

@SuppressWarnings("all")
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-06-17")
public class TLZ_NodeTable {

  public interface Iface extends TxnCtl.Iface {

    public TLZ_NodeId allocNodeId(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node) throws org.apache.thrift.TException;

    public TLZ_NodeId findByNode(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node) throws org.apache.thrift.TException;

    public org.apache.jena.riot.thrift.wire.RDF_Term findByNodeId(long requestId, long txnId, TLZ_NodeId nodeId) throws org.apache.thrift.TException;

    public java.util.List<TLZ_NodeId> allocNodeIds(long requestId, long txnId, java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term> nodes) throws org.apache.thrift.TException;

    public java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term> lookupNodeIds(long requestId, long txnId, java.util.List<TLZ_NodeId> nodeIds) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends TxnCtl .AsyncIface {

    public void allocNodeId(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node, org.apache.thrift.async.AsyncMethodCallback<TLZ_NodeId> resultHandler) throws org.apache.thrift.TException;

    public void findByNode(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node, org.apache.thrift.async.AsyncMethodCallback<TLZ_NodeId> resultHandler) throws org.apache.thrift.TException;

    public void findByNodeId(long requestId, long txnId, TLZ_NodeId nodeId, org.apache.thrift.async.AsyncMethodCallback<org.apache.jena.riot.thrift.wire.RDF_Term> resultHandler) throws org.apache.thrift.TException;

    public void allocNodeIds(long requestId, long txnId, java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term> nodes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TLZ_NodeId>> resultHandler) throws org.apache.thrift.TException;

    public void lookupNodeIds(long requestId, long txnId, java.util.List<TLZ_NodeId> nodeIds, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends TxnCtl.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TLZ_NodeId allocNodeId(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node) throws org.apache.thrift.TException
    {
      send_allocNodeId(requestId, txnId, node);
      return recv_allocNodeId();
    }

    public void send_allocNodeId(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node) throws org.apache.thrift.TException
    {
      allocNodeId_args args = new allocNodeId_args();
      args.setRequestId(requestId);
      args.setTxnId(txnId);
      args.setNode(node);
      sendBase("allocNodeId", args);
    }

    public TLZ_NodeId recv_allocNodeId() throws org.apache.thrift.TException
    {
      allocNodeId_result result = new allocNodeId_result();
      receiveBase(result, "allocNodeId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "allocNodeId failed: unknown result");
    }

    public TLZ_NodeId findByNode(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node) throws org.apache.thrift.TException
    {
      send_findByNode(requestId, txnId, node);
      return recv_findByNode();
    }

    public void send_findByNode(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node) throws org.apache.thrift.TException
    {
      findByNode_args args = new findByNode_args();
      args.setRequestId(requestId);
      args.setTxnId(txnId);
      args.setNode(node);
      sendBase("findByNode", args);
    }

    public TLZ_NodeId recv_findByNode() throws org.apache.thrift.TException
    {
      findByNode_result result = new findByNode_result();
      receiveBase(result, "findByNode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findByNode failed: unknown result");
    }

    public org.apache.jena.riot.thrift.wire.RDF_Term findByNodeId(long requestId, long txnId, TLZ_NodeId nodeId) throws org.apache.thrift.TException
    {
      send_findByNodeId(requestId, txnId, nodeId);
      return recv_findByNodeId();
    }

    public void send_findByNodeId(long requestId, long txnId, TLZ_NodeId nodeId) throws org.apache.thrift.TException
    {
      findByNodeId_args args = new findByNodeId_args();
      args.setRequestId(requestId);
      args.setTxnId(txnId);
      args.setNodeId(nodeId);
      sendBase("findByNodeId", args);
    }

    public org.apache.jena.riot.thrift.wire.RDF_Term recv_findByNodeId() throws org.apache.thrift.TException
    {
      findByNodeId_result result = new findByNodeId_result();
      receiveBase(result, "findByNodeId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findByNodeId failed: unknown result");
    }

    public java.util.List<TLZ_NodeId> allocNodeIds(long requestId, long txnId, java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term> nodes) throws org.apache.thrift.TException
    {
      send_allocNodeIds(requestId, txnId, nodes);
      return recv_allocNodeIds();
    }

    public void send_allocNodeIds(long requestId, long txnId, java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term> nodes) throws org.apache.thrift.TException
    {
      allocNodeIds_args args = new allocNodeIds_args();
      args.setRequestId(requestId);
      args.setTxnId(txnId);
      args.setNodes(nodes);
      sendBase("allocNodeIds", args);
    }

    public java.util.List<TLZ_NodeId> recv_allocNodeIds() throws org.apache.thrift.TException
    {
      allocNodeIds_result result = new allocNodeIds_result();
      receiveBase(result, "allocNodeIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "allocNodeIds failed: unknown result");
    }

    public java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term> lookupNodeIds(long requestId, long txnId, java.util.List<TLZ_NodeId> nodeIds) throws org.apache.thrift.TException
    {
      send_lookupNodeIds(requestId, txnId, nodeIds);
      return recv_lookupNodeIds();
    }

    public void send_lookupNodeIds(long requestId, long txnId, java.util.List<TLZ_NodeId> nodeIds) throws org.apache.thrift.TException
    {
      lookupNodeIds_args args = new lookupNodeIds_args();
      args.setRequestId(requestId);
      args.setTxnId(txnId);
      args.setNodeIds(nodeIds);
      sendBase("lookupNodeIds", args);
    }

    public java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term> recv_lookupNodeIds() throws org.apache.thrift.TException
    {
      lookupNodeIds_result result = new lookupNodeIds_result();
      receiveBase(result, "lookupNodeIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "lookupNodeIds failed: unknown result");
    }

  }
  public static class AsyncClient extends TxnCtl.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void allocNodeId(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node, org.apache.thrift.async.AsyncMethodCallback<TLZ_NodeId> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      allocNodeId_call method_call = new allocNodeId_call(requestId, txnId, node, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class allocNodeId_call extends org.apache.thrift.async.TAsyncMethodCall<TLZ_NodeId> {
      private long requestId;
      private long txnId;
      private org.apache.jena.riot.thrift.wire.RDF_Term node;
      public allocNodeId_call(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node, org.apache.thrift.async.AsyncMethodCallback<TLZ_NodeId> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.txnId = txnId;
        this.node = node;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("allocNodeId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        allocNodeId_args args = new allocNodeId_args();
        args.setRequestId(requestId);
        args.setTxnId(txnId);
        args.setNode(node);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TLZ_NodeId getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_allocNodeId();
      }
    }

    public void findByNode(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node, org.apache.thrift.async.AsyncMethodCallback<TLZ_NodeId> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findByNode_call method_call = new findByNode_call(requestId, txnId, node, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findByNode_call extends org.apache.thrift.async.TAsyncMethodCall<TLZ_NodeId> {
      private long requestId;
      private long txnId;
      private org.apache.jena.riot.thrift.wire.RDF_Term node;
      public findByNode_call(long requestId, long txnId, org.apache.jena.riot.thrift.wire.RDF_Term node, org.apache.thrift.async.AsyncMethodCallback<TLZ_NodeId> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.txnId = txnId;
        this.node = node;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findByNode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findByNode_args args = new findByNode_args();
        args.setRequestId(requestId);
        args.setTxnId(txnId);
        args.setNode(node);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TLZ_NodeId getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findByNode();
      }
    }

    public void findByNodeId(long requestId, long txnId, TLZ_NodeId nodeId, org.apache.thrift.async.AsyncMethodCallback<org.apache.jena.riot.thrift.wire.RDF_Term> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findByNodeId_call method_call = new findByNodeId_call(requestId, txnId, nodeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findByNodeId_call extends org.apache.thrift.async.TAsyncMethodCall<org.apache.jena.riot.thrift.wire.RDF_Term> {
      private long requestId;
      private long txnId;
      private TLZ_NodeId nodeId;
      public findByNodeId_call(long requestId, long txnId, TLZ_NodeId nodeId, org.apache.thrift.async.AsyncMethodCallback<org.apache.jena.riot.thrift.wire.RDF_Term> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.txnId = txnId;
        this.nodeId = nodeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findByNodeId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findByNodeId_args args = new findByNodeId_args();
        args.setRequestId(requestId);
        args.setTxnId(txnId);
        args.setNodeId(nodeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public org.apache.jena.riot.thrift.wire.RDF_Term getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findByNodeId();
      }
    }

    public void allocNodeIds(long requestId, long txnId, java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term> nodes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TLZ_NodeId>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      allocNodeIds_call method_call = new allocNodeIds_call(requestId, txnId, nodes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class allocNodeIds_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TLZ_NodeId>> {
      private long requestId;
      private long txnId;
      private java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term> nodes;
      public allocNodeIds_call(long requestId, long txnId, java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term> nodes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TLZ_NodeId>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.txnId = txnId;
        this.nodes = nodes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("allocNodeIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        allocNodeIds_args args = new allocNodeIds_args();
        args.setRequestId(requestId);
        args.setTxnId(txnId);
        args.setNodes(nodes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TLZ_NodeId> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_allocNodeIds();
      }
    }

    public void lookupNodeIds(long requestId, long txnId, java.util.List<TLZ_NodeId> nodeIds, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lookupNodeIds_call method_call = new lookupNodeIds_call(requestId, txnId, nodeIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lookupNodeIds_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term>> {
      private long requestId;
      private long txnId;
      private java.util.List<TLZ_NodeId> nodeIds;
      public lookupNodeIds_call(long requestId, long txnId, java.util.List<TLZ_NodeId> nodeIds, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestId = requestId;
        this.txnId = txnId;
        this.nodeIds = nodeIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lookupNodeIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lookupNodeIds_args args = new lookupNodeIds_args();
        args.setRequestId(requestId);
        args.setTxnId(txnId);
        args.setNodeIds(nodeIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lookupNodeIds();
      }
    }

  }

  public static class Processor<I extends Iface> extends TxnCtl.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("allocNodeId", new allocNodeId());
      processMap.put("findByNode", new findByNode());
      processMap.put("findByNodeId", new findByNodeId());
      processMap.put("allocNodeIds", new allocNodeIds());
      processMap.put("lookupNodeIds", new lookupNodeIds());
      return processMap;
    }

    public static class allocNodeId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, allocNodeId_args> {
      public allocNodeId() {
        super("allocNodeId");
      }

      public allocNodeId_args getEmptyArgsInstance() {
        return new allocNodeId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public allocNodeId_result getResult(I iface, allocNodeId_args args) throws org.apache.thrift.TException {
        allocNodeId_result result = new allocNodeId_result();
        result.success = iface.allocNodeId(args.requestId, args.txnId, args.node);
        return result;
      }
    }

    public static class findByNode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findByNode_args> {
      public findByNode() {
        super("findByNode");
      }

      public findByNode_args getEmptyArgsInstance() {
        return new findByNode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findByNode_result getResult(I iface, findByNode_args args) throws org.apache.thrift.TException {
        findByNode_result result = new findByNode_result();
        result.success = iface.findByNode(args.requestId, args.txnId, args.node);
        return result;
      }
    }

    public static class findByNodeId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findByNodeId_args> {
      public findByNodeId() {
        super("findByNodeId");
      }

      public findByNodeId_args getEmptyArgsInstance() {
        return new findByNodeId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findByNodeId_result getResult(I iface, findByNodeId_args args) throws org.apache.thrift.TException {
        findByNodeId_result result = new findByNodeId_result();
        result.success = iface.findByNodeId(args.requestId, args.txnId, args.nodeId);
        return result;
      }
    }

    public static class allocNodeIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, allocNodeIds_args> {
      public allocNodeIds() {
        super("allocNodeIds");
      }

      public allocNodeIds_args getEmptyArgsInstance() {
        return new allocNodeIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public allocNodeIds_result getResult(I iface, allocNodeIds_args args) throws org.apache.thrift.TException {
        allocNodeIds_result result = new allocNodeIds_result();
        result.success = iface.allocNodeIds(args.requestId, args.txnId, args.nodes);
        return result;
      }
    }

    public static class lookupNodeIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lookupNodeIds_args> {
      public lookupNodeIds() {
        super("lookupNodeIds");
      }

      public lookupNodeIds_args getEmptyArgsInstance() {
        return new lookupNodeIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public lookupNodeIds_result getResult(I iface, lookupNodeIds_args args) throws org.apache.thrift.TException {
        lookupNodeIds_result result = new lookupNodeIds_result();
        result.success = iface.lookupNodeIds(args.requestId, args.txnId, args.nodeIds);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends TxnCtl.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("allocNodeId", new allocNodeId());
      processMap.put("findByNode", new findByNode());
      processMap.put("findByNodeId", new findByNodeId());
      processMap.put("allocNodeIds", new allocNodeIds());
      processMap.put("lookupNodeIds", new lookupNodeIds());
      return processMap;
    }

    public static class allocNodeId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, allocNodeId_args, TLZ_NodeId> {
      public allocNodeId() {
        super("allocNodeId");
      }

      public allocNodeId_args getEmptyArgsInstance() {
        return new allocNodeId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TLZ_NodeId> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TLZ_NodeId>() { 
          public void onComplete(TLZ_NodeId o) {
            allocNodeId_result result = new allocNodeId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            allocNodeId_result result = new allocNodeId_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, allocNodeId_args args, org.apache.thrift.async.AsyncMethodCallback<TLZ_NodeId> resultHandler) throws org.apache.thrift.TException {
        iface.allocNodeId(args.requestId, args.txnId, args.node,resultHandler);
      }
    }

    public static class findByNode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findByNode_args, TLZ_NodeId> {
      public findByNode() {
        super("findByNode");
      }

      public findByNode_args getEmptyArgsInstance() {
        return new findByNode_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TLZ_NodeId> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TLZ_NodeId>() { 
          public void onComplete(TLZ_NodeId o) {
            findByNode_result result = new findByNode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findByNode_result result = new findByNode_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findByNode_args args, org.apache.thrift.async.AsyncMethodCallback<TLZ_NodeId> resultHandler) throws org.apache.thrift.TException {
        iface.findByNode(args.requestId, args.txnId, args.node,resultHandler);
      }
    }

    public static class findByNodeId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findByNodeId_args, org.apache.jena.riot.thrift.wire.RDF_Term> {
      public findByNodeId() {
        super("findByNodeId");
      }

      public findByNodeId_args getEmptyArgsInstance() {
        return new findByNodeId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<org.apache.jena.riot.thrift.wire.RDF_Term> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<org.apache.jena.riot.thrift.wire.RDF_Term>() { 
          public void onComplete(org.apache.jena.riot.thrift.wire.RDF_Term o) {
            findByNodeId_result result = new findByNodeId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findByNodeId_result result = new findByNodeId_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findByNodeId_args args, org.apache.thrift.async.AsyncMethodCallback<org.apache.jena.riot.thrift.wire.RDF_Term> resultHandler) throws org.apache.thrift.TException {
        iface.findByNodeId(args.requestId, args.txnId, args.nodeId,resultHandler);
      }
    }

    public static class allocNodeIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, allocNodeIds_args, java.util.List<TLZ_NodeId>> {
      public allocNodeIds() {
        super("allocNodeIds");
      }

      public allocNodeIds_args getEmptyArgsInstance() {
        return new allocNodeIds_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TLZ_NodeId>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TLZ_NodeId>>() { 
          public void onComplete(java.util.List<TLZ_NodeId> o) {
            allocNodeIds_result result = new allocNodeIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            allocNodeIds_result result = new allocNodeIds_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, allocNodeIds_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TLZ_NodeId>> resultHandler) throws org.apache.thrift.TException {
        iface.allocNodeIds(args.requestId, args.txnId, args.nodes,resultHandler);
      }
    }

    public static class lookupNodeIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, lookupNodeIds_args, java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term>> {
      public lookupNodeIds() {
        super("lookupNodeIds");
      }

      public lookupNodeIds_args getEmptyArgsInstance() {
        return new lookupNodeIds_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term>>() { 
          public void onComplete(java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term> o) {
            lookupNodeIds_result result = new lookupNodeIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            lookupNodeIds_result result = new lookupNodeIds_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, lookupNodeIds_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term>> resultHandler) throws org.apache.thrift.TException {
        iface.lookupNodeIds(args.requestId, args.txnId, args.nodeIds,resultHandler);
      }
    }

  }

  public static class allocNodeId_args implements org.apache.thrift.TBase<allocNodeId_args, allocNodeId_args._Fields>, java.io.Serializable, Cloneable, Comparable<allocNodeId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("allocNodeId_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txnId", org.apache.thrift.protocol.TType.I64, (short)9);
    private static final org.apache.thrift.protocol.TField NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("node", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new allocNodeId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new allocNodeId_argsTupleSchemeFactory();

    public long requestId; // required
    public long txnId; // required
    public org.apache.jena.riot.thrift.wire.RDF_Term node; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      TXN_ID((short)9, "txnId"),
      NODE((short)3, "node");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 9: // TXN_ID
            return TXN_ID;
          case 3: // NODE
            return NODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __TXNID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txnId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TxnId")));
      tmpMap.put(_Fields.NODE, new org.apache.thrift.meta_data.FieldMetaData("node", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.jena.riot.thrift.wire.RDF_Term.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(allocNodeId_args.class, metaDataMap);
    }

    public allocNodeId_args() {
    }

    public allocNodeId_args(
      long requestId,
      long txnId,
      org.apache.jena.riot.thrift.wire.RDF_Term node)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.txnId = txnId;
      setTxnIdIsSet(true);
      this.node = node;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public allocNodeId_args(allocNodeId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.txnId = other.txnId;
      if (other.isSetNode()) {
        this.node = new org.apache.jena.riot.thrift.wire.RDF_Term(other.node);
      }
    }

    public allocNodeId_args deepCopy() {
      return new allocNodeId_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setTxnIdIsSet(false);
      this.txnId = 0;
      this.node = null;
    }

    public long getRequestId() {
      return this.requestId;
    }

    public allocNodeId_args setRequestId(long requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public long getTxnId() {
      return this.txnId;
    }

    public allocNodeId_args setTxnId(long txnId) {
      this.txnId = txnId;
      setTxnIdIsSet(true);
      return this;
    }

    public void unsetTxnId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    /** Returns true if field txnId is set (has been assigned a value) and false otherwise */
    public boolean isSetTxnId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    public void setTxnIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXNID_ISSET_ID, value);
    }

    public org.apache.jena.riot.thrift.wire.RDF_Term getNode() {
      return this.node;
    }

    public allocNodeId_args setNode(org.apache.jena.riot.thrift.wire.RDF_Term node) {
      this.node = node;
      return this;
    }

    public void unsetNode() {
      this.node = null;
    }

    /** Returns true if field node is set (has been assigned a value) and false otherwise */
    public boolean isSetNode() {
      return this.node != null;
    }

    public void setNodeIsSet(boolean value) {
      if (!value) {
        this.node = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((java.lang.Long)value);
        }
        break;

      case TXN_ID:
        if (value == null) {
          unsetTxnId();
        } else {
          setTxnId((java.lang.Long)value);
        }
        break;

      case NODE:
        if (value == null) {
          unsetNode();
        } else {
          setNode((org.apache.jena.riot.thrift.wire.RDF_Term)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return getRequestId();

      case TXN_ID:
        return getTxnId();

      case NODE:
        return getNode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case TXN_ID:
        return isSetTxnId();
      case NODE:
        return isSetNode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof allocNodeId_args)
        return this.equals((allocNodeId_args)that);
      return false;
    }

    public boolean equals(allocNodeId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_txnId = true;
      boolean that_present_txnId = true;
      if (this_present_txnId || that_present_txnId) {
        if (!(this_present_txnId && that_present_txnId))
          return false;
        if (this.txnId != that.txnId)
          return false;
      }

      boolean this_present_node = true && this.isSetNode();
      boolean that_present_node = true && that.isSetNode();
      if (this_present_node || that_present_node) {
        if (!(this_present_node && that_present_node))
          return false;
        if (!this.node.equals(that.node))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestId);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txnId);

      hashCode = hashCode * 8191 + ((isSetNode()) ? 131071 : 524287);
      if (isSetNode())
        hashCode = hashCode * 8191 + node.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(allocNodeId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTxnId()).compareTo(other.isSetTxnId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxnId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnId, other.txnId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNode()).compareTo(other.isSetNode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node, other.node);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("allocNodeId_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("txnId:");
      sb.append(this.txnId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("node:");
      if (this.node == null) {
        sb.append("null");
      } else {
        sb.append(this.node);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class allocNodeId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public allocNodeId_argsStandardScheme getScheme() {
        return new allocNodeId_argsStandardScheme();
      }
    }

    private static class allocNodeId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<allocNodeId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, allocNodeId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.requestId = iprot.readI64();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // TXN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.txnId = iprot.readI64();
                struct.setTxnIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.node = new org.apache.jena.riot.thrift.wire.RDF_Term();
                struct.node.read(iprot);
                struct.setNodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, allocNodeId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI64(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.node != null) {
          oprot.writeFieldBegin(NODE_FIELD_DESC);
          struct.node.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.txnId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class allocNodeId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public allocNodeId_argsTupleScheme getScheme() {
        return new allocNodeId_argsTupleScheme();
      }
    }

    private static class allocNodeId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<allocNodeId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, allocNodeId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetTxnId()) {
          optionals.set(1);
        }
        if (struct.isSetNode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRequestId()) {
          oprot.writeI64(struct.requestId);
        }
        if (struct.isSetTxnId()) {
          oprot.writeI64(struct.txnId);
        }
        if (struct.isSetNode()) {
          struct.node.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, allocNodeId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI64();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txnId = iprot.readI64();
          struct.setTxnIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.node = new org.apache.jena.riot.thrift.wire.RDF_Term();
          struct.node.read(iprot);
          struct.setNodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class allocNodeId_result implements org.apache.thrift.TBase<allocNodeId_result, allocNodeId_result._Fields>, java.io.Serializable, Cloneable, Comparable<allocNodeId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("allocNodeId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new allocNodeId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new allocNodeId_resultTupleSchemeFactory();

    public TLZ_NodeId success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLZ_NodeId.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(allocNodeId_result.class, metaDataMap);
    }

    public allocNodeId_result() {
    }

    public allocNodeId_result(
      TLZ_NodeId success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public allocNodeId_result(allocNodeId_result other) {
      if (other.isSetSuccess()) {
        this.success = new TLZ_NodeId(other.success);
      }
    }

    public allocNodeId_result deepCopy() {
      return new allocNodeId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TLZ_NodeId getSuccess() {
      return this.success;
    }

    public allocNodeId_result setSuccess(TLZ_NodeId success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TLZ_NodeId)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof allocNodeId_result)
        return this.equals((allocNodeId_result)that);
      return false;
    }

    public boolean equals(allocNodeId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(allocNodeId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("allocNodeId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class allocNodeId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public allocNodeId_resultStandardScheme getScheme() {
        return new allocNodeId_resultStandardScheme();
      }
    }

    private static class allocNodeId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<allocNodeId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, allocNodeId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TLZ_NodeId();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, allocNodeId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class allocNodeId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public allocNodeId_resultTupleScheme getScheme() {
        return new allocNodeId_resultTupleScheme();
      }
    }

    private static class allocNodeId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<allocNodeId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, allocNodeId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, allocNodeId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TLZ_NodeId();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findByNode_args implements org.apache.thrift.TBase<findByNode_args, findByNode_args._Fields>, java.io.Serializable, Cloneable, Comparable<findByNode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findByNode_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txnId", org.apache.thrift.protocol.TType.I64, (short)9);
    private static final org.apache.thrift.protocol.TField NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("node", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findByNode_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findByNode_argsTupleSchemeFactory();

    public long requestId; // required
    public long txnId; // required
    public org.apache.jena.riot.thrift.wire.RDF_Term node; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      TXN_ID((short)9, "txnId"),
      NODE((short)3, "node");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 9: // TXN_ID
            return TXN_ID;
          case 3: // NODE
            return NODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __TXNID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txnId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TxnId")));
      tmpMap.put(_Fields.NODE, new org.apache.thrift.meta_data.FieldMetaData("node", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.jena.riot.thrift.wire.RDF_Term.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findByNode_args.class, metaDataMap);
    }

    public findByNode_args() {
    }

    public findByNode_args(
      long requestId,
      long txnId,
      org.apache.jena.riot.thrift.wire.RDF_Term node)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.txnId = txnId;
      setTxnIdIsSet(true);
      this.node = node;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findByNode_args(findByNode_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.txnId = other.txnId;
      if (other.isSetNode()) {
        this.node = new org.apache.jena.riot.thrift.wire.RDF_Term(other.node);
      }
    }

    public findByNode_args deepCopy() {
      return new findByNode_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setTxnIdIsSet(false);
      this.txnId = 0;
      this.node = null;
    }

    public long getRequestId() {
      return this.requestId;
    }

    public findByNode_args setRequestId(long requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public long getTxnId() {
      return this.txnId;
    }

    public findByNode_args setTxnId(long txnId) {
      this.txnId = txnId;
      setTxnIdIsSet(true);
      return this;
    }

    public void unsetTxnId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    /** Returns true if field txnId is set (has been assigned a value) and false otherwise */
    public boolean isSetTxnId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    public void setTxnIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXNID_ISSET_ID, value);
    }

    public org.apache.jena.riot.thrift.wire.RDF_Term getNode() {
      return this.node;
    }

    public findByNode_args setNode(org.apache.jena.riot.thrift.wire.RDF_Term node) {
      this.node = node;
      return this;
    }

    public void unsetNode() {
      this.node = null;
    }

    /** Returns true if field node is set (has been assigned a value) and false otherwise */
    public boolean isSetNode() {
      return this.node != null;
    }

    public void setNodeIsSet(boolean value) {
      if (!value) {
        this.node = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((java.lang.Long)value);
        }
        break;

      case TXN_ID:
        if (value == null) {
          unsetTxnId();
        } else {
          setTxnId((java.lang.Long)value);
        }
        break;

      case NODE:
        if (value == null) {
          unsetNode();
        } else {
          setNode((org.apache.jena.riot.thrift.wire.RDF_Term)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return getRequestId();

      case TXN_ID:
        return getTxnId();

      case NODE:
        return getNode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case TXN_ID:
        return isSetTxnId();
      case NODE:
        return isSetNode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findByNode_args)
        return this.equals((findByNode_args)that);
      return false;
    }

    public boolean equals(findByNode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_txnId = true;
      boolean that_present_txnId = true;
      if (this_present_txnId || that_present_txnId) {
        if (!(this_present_txnId && that_present_txnId))
          return false;
        if (this.txnId != that.txnId)
          return false;
      }

      boolean this_present_node = true && this.isSetNode();
      boolean that_present_node = true && that.isSetNode();
      if (this_present_node || that_present_node) {
        if (!(this_present_node && that_present_node))
          return false;
        if (!this.node.equals(that.node))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestId);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txnId);

      hashCode = hashCode * 8191 + ((isSetNode()) ? 131071 : 524287);
      if (isSetNode())
        hashCode = hashCode * 8191 + node.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findByNode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTxnId()).compareTo(other.isSetTxnId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxnId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnId, other.txnId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNode()).compareTo(other.isSetNode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node, other.node);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findByNode_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("txnId:");
      sb.append(this.txnId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("node:");
      if (this.node == null) {
        sb.append("null");
      } else {
        sb.append(this.node);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findByNode_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findByNode_argsStandardScheme getScheme() {
        return new findByNode_argsStandardScheme();
      }
    }

    private static class findByNode_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findByNode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findByNode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.requestId = iprot.readI64();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // TXN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.txnId = iprot.readI64();
                struct.setTxnIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.node = new org.apache.jena.riot.thrift.wire.RDF_Term();
                struct.node.read(iprot);
                struct.setNodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findByNode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI64(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.node != null) {
          oprot.writeFieldBegin(NODE_FIELD_DESC);
          struct.node.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.txnId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findByNode_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findByNode_argsTupleScheme getScheme() {
        return new findByNode_argsTupleScheme();
      }
    }

    private static class findByNode_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findByNode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findByNode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetTxnId()) {
          optionals.set(1);
        }
        if (struct.isSetNode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRequestId()) {
          oprot.writeI64(struct.requestId);
        }
        if (struct.isSetTxnId()) {
          oprot.writeI64(struct.txnId);
        }
        if (struct.isSetNode()) {
          struct.node.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findByNode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI64();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txnId = iprot.readI64();
          struct.setTxnIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.node = new org.apache.jena.riot.thrift.wire.RDF_Term();
          struct.node.read(iprot);
          struct.setNodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findByNode_result implements org.apache.thrift.TBase<findByNode_result, findByNode_result._Fields>, java.io.Serializable, Cloneable, Comparable<findByNode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findByNode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findByNode_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findByNode_resultTupleSchemeFactory();

    public TLZ_NodeId success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLZ_NodeId.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findByNode_result.class, metaDataMap);
    }

    public findByNode_result() {
    }

    public findByNode_result(
      TLZ_NodeId success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findByNode_result(findByNode_result other) {
      if (other.isSetSuccess()) {
        this.success = new TLZ_NodeId(other.success);
      }
    }

    public findByNode_result deepCopy() {
      return new findByNode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public TLZ_NodeId getSuccess() {
      return this.success;
    }

    public findByNode_result setSuccess(TLZ_NodeId success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TLZ_NodeId)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findByNode_result)
        return this.equals((findByNode_result)that);
      return false;
    }

    public boolean equals(findByNode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findByNode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findByNode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findByNode_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findByNode_resultStandardScheme getScheme() {
        return new findByNode_resultStandardScheme();
      }
    }

    private static class findByNode_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findByNode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findByNode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TLZ_NodeId();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findByNode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findByNode_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findByNode_resultTupleScheme getScheme() {
        return new findByNode_resultTupleScheme();
      }
    }

    private static class findByNode_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findByNode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findByNode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findByNode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new TLZ_NodeId();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findByNodeId_args implements org.apache.thrift.TBase<findByNodeId_args, findByNodeId_args._Fields>, java.io.Serializable, Cloneable, Comparable<findByNodeId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findByNodeId_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txnId", org.apache.thrift.protocol.TType.I64, (short)9);
    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findByNodeId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findByNodeId_argsTupleSchemeFactory();

    public long requestId; // required
    public long txnId; // required
    public TLZ_NodeId nodeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      TXN_ID((short)9, "txnId"),
      NODE_ID((short)3, "nodeId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 9: // TXN_ID
            return TXN_ID;
          case 3: // NODE_ID
            return NODE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __TXNID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txnId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TxnId")));
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLZ_NodeId.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findByNodeId_args.class, metaDataMap);
    }

    public findByNodeId_args() {
    }

    public findByNodeId_args(
      long requestId,
      long txnId,
      TLZ_NodeId nodeId)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.txnId = txnId;
      setTxnIdIsSet(true);
      this.nodeId = nodeId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findByNodeId_args(findByNodeId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.txnId = other.txnId;
      if (other.isSetNodeId()) {
        this.nodeId = new TLZ_NodeId(other.nodeId);
      }
    }

    public findByNodeId_args deepCopy() {
      return new findByNodeId_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setTxnIdIsSet(false);
      this.txnId = 0;
      this.nodeId = null;
    }

    public long getRequestId() {
      return this.requestId;
    }

    public findByNodeId_args setRequestId(long requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public long getTxnId() {
      return this.txnId;
    }

    public findByNodeId_args setTxnId(long txnId) {
      this.txnId = txnId;
      setTxnIdIsSet(true);
      return this;
    }

    public void unsetTxnId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    /** Returns true if field txnId is set (has been assigned a value) and false otherwise */
    public boolean isSetTxnId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    public void setTxnIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXNID_ISSET_ID, value);
    }

    public TLZ_NodeId getNodeId() {
      return this.nodeId;
    }

    public findByNodeId_args setNodeId(TLZ_NodeId nodeId) {
      this.nodeId = nodeId;
      return this;
    }

    public void unsetNodeId() {
      this.nodeId = null;
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return this.nodeId != null;
    }

    public void setNodeIdIsSet(boolean value) {
      if (!value) {
        this.nodeId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((java.lang.Long)value);
        }
        break;

      case TXN_ID:
        if (value == null) {
          unsetTxnId();
        } else {
          setTxnId((java.lang.Long)value);
        }
        break;

      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((TLZ_NodeId)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return getRequestId();

      case TXN_ID:
        return getTxnId();

      case NODE_ID:
        return getNodeId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case TXN_ID:
        return isSetTxnId();
      case NODE_ID:
        return isSetNodeId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findByNodeId_args)
        return this.equals((findByNodeId_args)that);
      return false;
    }

    public boolean equals(findByNodeId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_txnId = true;
      boolean that_present_txnId = true;
      if (this_present_txnId || that_present_txnId) {
        if (!(this_present_txnId && that_present_txnId))
          return false;
        if (this.txnId != that.txnId)
          return false;
      }

      boolean this_present_nodeId = true && this.isSetNodeId();
      boolean that_present_nodeId = true && that.isSetNodeId();
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (!this.nodeId.equals(that.nodeId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestId);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txnId);

      hashCode = hashCode * 8191 + ((isSetNodeId()) ? 131071 : 524287);
      if (isSetNodeId())
        hashCode = hashCode * 8191 + nodeId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findByNodeId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTxnId()).compareTo(other.isSetTxnId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxnId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnId, other.txnId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNodeId()).compareTo(other.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, other.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findByNodeId_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("txnId:");
      sb.append(this.txnId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeId:");
      if (this.nodeId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (nodeId != null) {
        nodeId.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findByNodeId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findByNodeId_argsStandardScheme getScheme() {
        return new findByNodeId_argsStandardScheme();
      }
    }

    private static class findByNodeId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findByNodeId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findByNodeId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.requestId = iprot.readI64();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // TXN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.txnId = iprot.readI64();
                struct.setTxnIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nodeId = new TLZ_NodeId();
                struct.nodeId.read(iprot);
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findByNodeId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI64(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.nodeId != null) {
          oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
          struct.nodeId.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.txnId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findByNodeId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findByNodeId_argsTupleScheme getScheme() {
        return new findByNodeId_argsTupleScheme();
      }
    }

    private static class findByNodeId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findByNodeId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findByNodeId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetTxnId()) {
          optionals.set(1);
        }
        if (struct.isSetNodeId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRequestId()) {
          oprot.writeI64(struct.requestId);
        }
        if (struct.isSetTxnId()) {
          oprot.writeI64(struct.txnId);
        }
        if (struct.isSetNodeId()) {
          struct.nodeId.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findByNodeId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI64();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txnId = iprot.readI64();
          struct.setTxnIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.nodeId = new TLZ_NodeId();
          struct.nodeId.read(iprot);
          struct.setNodeIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findByNodeId_result implements org.apache.thrift.TBase<findByNodeId_result, findByNodeId_result._Fields>, java.io.Serializable, Cloneable, Comparable<findByNodeId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findByNodeId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findByNodeId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findByNodeId_resultTupleSchemeFactory();

    public org.apache.jena.riot.thrift.wire.RDF_Term success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.jena.riot.thrift.wire.RDF_Term.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findByNodeId_result.class, metaDataMap);
    }

    public findByNodeId_result() {
    }

    public findByNodeId_result(
      org.apache.jena.riot.thrift.wire.RDF_Term success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findByNodeId_result(findByNodeId_result other) {
      if (other.isSetSuccess()) {
        this.success = new org.apache.jena.riot.thrift.wire.RDF_Term(other.success);
      }
    }

    public findByNodeId_result deepCopy() {
      return new findByNodeId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public org.apache.jena.riot.thrift.wire.RDF_Term getSuccess() {
      return this.success;
    }

    public findByNodeId_result setSuccess(org.apache.jena.riot.thrift.wire.RDF_Term success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((org.apache.jena.riot.thrift.wire.RDF_Term)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof findByNodeId_result)
        return this.equals((findByNodeId_result)that);
      return false;
    }

    public boolean equals(findByNodeId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findByNodeId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findByNodeId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findByNodeId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findByNodeId_resultStandardScheme getScheme() {
        return new findByNodeId_resultStandardScheme();
      }
    }

    private static class findByNodeId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findByNodeId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findByNodeId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new org.apache.jena.riot.thrift.wire.RDF_Term();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findByNodeId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findByNodeId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findByNodeId_resultTupleScheme getScheme() {
        return new findByNodeId_resultTupleScheme();
      }
    }

    private static class findByNodeId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findByNodeId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findByNodeId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findByNodeId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new org.apache.jena.riot.thrift.wire.RDF_Term();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class allocNodeIds_args implements org.apache.thrift.TBase<allocNodeIds_args, allocNodeIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<allocNodeIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("allocNodeIds_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txnId", org.apache.thrift.protocol.TType.I64, (short)9);
    private static final org.apache.thrift.protocol.TField NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("nodes", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new allocNodeIds_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new allocNodeIds_argsTupleSchemeFactory();

    public long requestId; // required
    public long txnId; // required
    public java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term> nodes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      TXN_ID((short)9, "txnId"),
      NODES((short)3, "nodes");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 9: // TXN_ID
            return TXN_ID;
          case 3: // NODES
            return NODES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __TXNID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txnId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TxnId")));
      tmpMap.put(_Fields.NODES, new org.apache.thrift.meta_data.FieldMetaData("nodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.jena.riot.thrift.wire.RDF_Term.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(allocNodeIds_args.class, metaDataMap);
    }

    public allocNodeIds_args() {
    }

    public allocNodeIds_args(
      long requestId,
      long txnId,
      java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term> nodes)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.txnId = txnId;
      setTxnIdIsSet(true);
      this.nodes = nodes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public allocNodeIds_args(allocNodeIds_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.txnId = other.txnId;
      if (other.isSetNodes()) {
        java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term> __this__nodes = new java.util.ArrayList<org.apache.jena.riot.thrift.wire.RDF_Term>(other.nodes.size());
        for (org.apache.jena.riot.thrift.wire.RDF_Term other_element : other.nodes) {
          __this__nodes.add(new org.apache.jena.riot.thrift.wire.RDF_Term(other_element));
        }
        this.nodes = __this__nodes;
      }
    }

    public allocNodeIds_args deepCopy() {
      return new allocNodeIds_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setTxnIdIsSet(false);
      this.txnId = 0;
      this.nodes = null;
    }

    public long getRequestId() {
      return this.requestId;
    }

    public allocNodeIds_args setRequestId(long requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public long getTxnId() {
      return this.txnId;
    }

    public allocNodeIds_args setTxnId(long txnId) {
      this.txnId = txnId;
      setTxnIdIsSet(true);
      return this;
    }

    public void unsetTxnId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    /** Returns true if field txnId is set (has been assigned a value) and false otherwise */
    public boolean isSetTxnId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    public void setTxnIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXNID_ISSET_ID, value);
    }

    public int getNodesSize() {
      return (this.nodes == null) ? 0 : this.nodes.size();
    }

    public java.util.Iterator<org.apache.jena.riot.thrift.wire.RDF_Term> getNodesIterator() {
      return (this.nodes == null) ? null : this.nodes.iterator();
    }

    public void addToNodes(org.apache.jena.riot.thrift.wire.RDF_Term elem) {
      if (this.nodes == null) {
        this.nodes = new java.util.ArrayList<org.apache.jena.riot.thrift.wire.RDF_Term>();
      }
      this.nodes.add(elem);
    }

    public java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term> getNodes() {
      return this.nodes;
    }

    public allocNodeIds_args setNodes(java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term> nodes) {
      this.nodes = nodes;
      return this;
    }

    public void unsetNodes() {
      this.nodes = null;
    }

    /** Returns true if field nodes is set (has been assigned a value) and false otherwise */
    public boolean isSetNodes() {
      return this.nodes != null;
    }

    public void setNodesIsSet(boolean value) {
      if (!value) {
        this.nodes = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((java.lang.Long)value);
        }
        break;

      case TXN_ID:
        if (value == null) {
          unsetTxnId();
        } else {
          setTxnId((java.lang.Long)value);
        }
        break;

      case NODES:
        if (value == null) {
          unsetNodes();
        } else {
          setNodes((java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return getRequestId();

      case TXN_ID:
        return getTxnId();

      case NODES:
        return getNodes();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case TXN_ID:
        return isSetTxnId();
      case NODES:
        return isSetNodes();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof allocNodeIds_args)
        return this.equals((allocNodeIds_args)that);
      return false;
    }

    public boolean equals(allocNodeIds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_txnId = true;
      boolean that_present_txnId = true;
      if (this_present_txnId || that_present_txnId) {
        if (!(this_present_txnId && that_present_txnId))
          return false;
        if (this.txnId != that.txnId)
          return false;
      }

      boolean this_present_nodes = true && this.isSetNodes();
      boolean that_present_nodes = true && that.isSetNodes();
      if (this_present_nodes || that_present_nodes) {
        if (!(this_present_nodes && that_present_nodes))
          return false;
        if (!this.nodes.equals(that.nodes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestId);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txnId);

      hashCode = hashCode * 8191 + ((isSetNodes()) ? 131071 : 524287);
      if (isSetNodes())
        hashCode = hashCode * 8191 + nodes.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(allocNodeIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTxnId()).compareTo(other.isSetTxnId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxnId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnId, other.txnId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNodes()).compareTo(other.isSetNodes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodes, other.nodes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("allocNodeIds_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("txnId:");
      sb.append(this.txnId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodes:");
      if (this.nodes == null) {
        sb.append("null");
      } else {
        sb.append(this.nodes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class allocNodeIds_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public allocNodeIds_argsStandardScheme getScheme() {
        return new allocNodeIds_argsStandardScheme();
      }
    }

    private static class allocNodeIds_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<allocNodeIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, allocNodeIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.requestId = iprot.readI64();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // TXN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.txnId = iprot.readI64();
                struct.setTxnIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NODES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.nodes = new java.util.ArrayList<org.apache.jena.riot.thrift.wire.RDF_Term>(_list40.size);
                  org.apache.jena.riot.thrift.wire.RDF_Term _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new org.apache.jena.riot.thrift.wire.RDF_Term();
                    _elem41.read(iprot);
                    struct.nodes.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setNodesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, allocNodeIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI64(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.nodes != null) {
          oprot.writeFieldBegin(NODES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.nodes.size()));
            for (org.apache.jena.riot.thrift.wire.RDF_Term _iter43 : struct.nodes)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.txnId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class allocNodeIds_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public allocNodeIds_argsTupleScheme getScheme() {
        return new allocNodeIds_argsTupleScheme();
      }
    }

    private static class allocNodeIds_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<allocNodeIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, allocNodeIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetTxnId()) {
          optionals.set(1);
        }
        if (struct.isSetNodes()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRequestId()) {
          oprot.writeI64(struct.requestId);
        }
        if (struct.isSetTxnId()) {
          oprot.writeI64(struct.txnId);
        }
        if (struct.isSetNodes()) {
          {
            oprot.writeI32(struct.nodes.size());
            for (org.apache.jena.riot.thrift.wire.RDF_Term _iter44 : struct.nodes)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, allocNodeIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI64();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txnId = iprot.readI64();
          struct.setTxnIdIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.nodes = new java.util.ArrayList<org.apache.jena.riot.thrift.wire.RDF_Term>(_list45.size);
            org.apache.jena.riot.thrift.wire.RDF_Term _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new org.apache.jena.riot.thrift.wire.RDF_Term();
              _elem46.read(iprot);
              struct.nodes.add(_elem46);
            }
          }
          struct.setNodesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class allocNodeIds_result implements org.apache.thrift.TBase<allocNodeIds_result, allocNodeIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<allocNodeIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("allocNodeIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new allocNodeIds_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new allocNodeIds_resultTupleSchemeFactory();

    public java.util.List<TLZ_NodeId> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLZ_NodeId.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(allocNodeIds_result.class, metaDataMap);
    }

    public allocNodeIds_result() {
    }

    public allocNodeIds_result(
      java.util.List<TLZ_NodeId> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public allocNodeIds_result(allocNodeIds_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TLZ_NodeId> __this__success = new java.util.ArrayList<TLZ_NodeId>(other.success.size());
        for (TLZ_NodeId other_element : other.success) {
          __this__success.add(new TLZ_NodeId(other_element));
        }
        this.success = __this__success;
      }
    }

    public allocNodeIds_result deepCopy() {
      return new allocNodeIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TLZ_NodeId> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TLZ_NodeId elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TLZ_NodeId>();
      }
      this.success.add(elem);
    }

    public java.util.List<TLZ_NodeId> getSuccess() {
      return this.success;
    }

    public allocNodeIds_result setSuccess(java.util.List<TLZ_NodeId> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TLZ_NodeId>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof allocNodeIds_result)
        return this.equals((allocNodeIds_result)that);
      return false;
    }

    public boolean equals(allocNodeIds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(allocNodeIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("allocNodeIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class allocNodeIds_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public allocNodeIds_resultStandardScheme getScheme() {
        return new allocNodeIds_resultStandardScheme();
      }
    }

    private static class allocNodeIds_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<allocNodeIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, allocNodeIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TLZ_NodeId>(_list48.size);
                  TLZ_NodeId _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new TLZ_NodeId();
                    _elem49.read(iprot);
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, allocNodeIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TLZ_NodeId _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class allocNodeIds_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public allocNodeIds_resultTupleScheme getScheme() {
        return new allocNodeIds_resultTupleScheme();
      }
    }

    private static class allocNodeIds_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<allocNodeIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, allocNodeIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TLZ_NodeId _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, allocNodeIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TLZ_NodeId>(_list53.size);
            TLZ_NodeId _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = new TLZ_NodeId();
              _elem54.read(iprot);
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class lookupNodeIds_args implements org.apache.thrift.TBase<lookupNodeIds_args, lookupNodeIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<lookupNodeIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lookupNodeIds_args");

    private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField TXN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("txnId", org.apache.thrift.protocol.TType.I64, (short)9);
    private static final org.apache.thrift.protocol.TField NODE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeIds", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new lookupNodeIds_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new lookupNodeIds_argsTupleSchemeFactory();

    public long requestId; // required
    public long txnId; // required
    public java.util.List<TLZ_NodeId> nodeIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_ID((short)1, "requestId"),
      TXN_ID((short)9, "txnId"),
      NODE_IDS((short)3, "nodeIds");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_ID
            return REQUEST_ID;
          case 9: // TXN_ID
            return TXN_ID;
          case 3: // NODE_IDS
            return NODE_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTID_ISSET_ID = 0;
    private static final int __TXNID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TXN_ID, new org.apache.thrift.meta_data.FieldMetaData("txnId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "TxnId")));
      tmpMap.put(_Fields.NODE_IDS, new org.apache.thrift.meta_data.FieldMetaData("nodeIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLZ_NodeId.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lookupNodeIds_args.class, metaDataMap);
    }

    public lookupNodeIds_args() {
    }

    public lookupNodeIds_args(
      long requestId,
      long txnId,
      java.util.List<TLZ_NodeId> nodeIds)
    {
      this();
      this.requestId = requestId;
      setRequestIdIsSet(true);
      this.txnId = txnId;
      setTxnIdIsSet(true);
      this.nodeIds = nodeIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lookupNodeIds_args(lookupNodeIds_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requestId = other.requestId;
      this.txnId = other.txnId;
      if (other.isSetNodeIds()) {
        java.util.List<TLZ_NodeId> __this__nodeIds = new java.util.ArrayList<TLZ_NodeId>(other.nodeIds.size());
        for (TLZ_NodeId other_element : other.nodeIds) {
          __this__nodeIds.add(new TLZ_NodeId(other_element));
        }
        this.nodeIds = __this__nodeIds;
      }
    }

    public lookupNodeIds_args deepCopy() {
      return new lookupNodeIds_args(this);
    }

    @Override
    public void clear() {
      setRequestIdIsSet(false);
      this.requestId = 0;
      setTxnIdIsSet(false);
      this.txnId = 0;
      this.nodeIds = null;
    }

    public long getRequestId() {
      return this.requestId;
    }

    public lookupNodeIds_args setRequestId(long requestId) {
      this.requestId = requestId;
      setRequestIdIsSet(true);
      return this;
    }

    public void unsetRequestId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
    }

    public void setRequestIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
    }

    public long getTxnId() {
      return this.txnId;
    }

    public lookupNodeIds_args setTxnId(long txnId) {
      this.txnId = txnId;
      setTxnIdIsSet(true);
      return this;
    }

    public void unsetTxnId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    /** Returns true if field txnId is set (has been assigned a value) and false otherwise */
    public boolean isSetTxnId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TXNID_ISSET_ID);
    }

    public void setTxnIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TXNID_ISSET_ID, value);
    }

    public int getNodeIdsSize() {
      return (this.nodeIds == null) ? 0 : this.nodeIds.size();
    }

    public java.util.Iterator<TLZ_NodeId> getNodeIdsIterator() {
      return (this.nodeIds == null) ? null : this.nodeIds.iterator();
    }

    public void addToNodeIds(TLZ_NodeId elem) {
      if (this.nodeIds == null) {
        this.nodeIds = new java.util.ArrayList<TLZ_NodeId>();
      }
      this.nodeIds.add(elem);
    }

    public java.util.List<TLZ_NodeId> getNodeIds() {
      return this.nodeIds;
    }

    public lookupNodeIds_args setNodeIds(java.util.List<TLZ_NodeId> nodeIds) {
      this.nodeIds = nodeIds;
      return this;
    }

    public void unsetNodeIds() {
      this.nodeIds = null;
    }

    /** Returns true if field nodeIds is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeIds() {
      return this.nodeIds != null;
    }

    public void setNodeIdsIsSet(boolean value) {
      if (!value) {
        this.nodeIds = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REQUEST_ID:
        if (value == null) {
          unsetRequestId();
        } else {
          setRequestId((java.lang.Long)value);
        }
        break;

      case TXN_ID:
        if (value == null) {
          unsetTxnId();
        } else {
          setTxnId((java.lang.Long)value);
        }
        break;

      case NODE_IDS:
        if (value == null) {
          unsetNodeIds();
        } else {
          setNodeIds((java.util.List<TLZ_NodeId>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_ID:
        return getRequestId();

      case TXN_ID:
        return getTxnId();

      case NODE_IDS:
        return getNodeIds();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_ID:
        return isSetRequestId();
      case TXN_ID:
        return isSetTxnId();
      case NODE_IDS:
        return isSetNodeIds();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof lookupNodeIds_args)
        return this.equals((lookupNodeIds_args)that);
      return false;
    }

    public boolean equals(lookupNodeIds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true;
      boolean that_present_requestId = true;
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (this.requestId != that.requestId)
          return false;
      }

      boolean this_present_txnId = true;
      boolean that_present_txnId = true;
      if (this_present_txnId || that_present_txnId) {
        if (!(this_present_txnId && that_present_txnId))
          return false;
        if (this.txnId != that.txnId)
          return false;
      }

      boolean this_present_nodeIds = true && this.isSetNodeIds();
      boolean that_present_nodeIds = true && that.isSetNodeIds();
      if (this_present_nodeIds || that_present_nodeIds) {
        if (!(this_present_nodeIds && that_present_nodeIds))
          return false;
        if (!this.nodeIds.equals(that.nodeIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(requestId);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(txnId);

      hashCode = hashCode * 8191 + ((isSetNodeIds()) ? 131071 : 524287);
      if (isSetNodeIds())
        hashCode = hashCode * 8191 + nodeIds.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(lookupNodeIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTxnId()).compareTo(other.isSetTxnId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTxnId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.txnId, other.txnId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNodeIds()).compareTo(other.isSetNodeIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeIds, other.nodeIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("lookupNodeIds_args(");
      boolean first = true;

      sb.append("requestId:");
      sb.append(this.requestId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("txnId:");
      sb.append(this.txnId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeIds:");
      if (this.nodeIds == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lookupNodeIds_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lookupNodeIds_argsStandardScheme getScheme() {
        return new lookupNodeIds_argsStandardScheme();
      }
    }

    private static class lookupNodeIds_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<lookupNodeIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lookupNodeIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.requestId = iprot.readI64();
                struct.setRequestIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // TXN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.txnId = iprot.readI64();
                struct.setTxnIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NODE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.nodeIds = new java.util.ArrayList<TLZ_NodeId>(_list56.size);
                  TLZ_NodeId _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new TLZ_NodeId();
                    _elem57.read(iprot);
                    struct.nodeIds.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setNodeIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lookupNodeIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeI64(struct.requestId);
        oprot.writeFieldEnd();
        if (struct.nodeIds != null) {
          oprot.writeFieldBegin(NODE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.nodeIds.size()));
            for (TLZ_NodeId _iter59 : struct.nodeIds)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TXN_ID_FIELD_DESC);
        oprot.writeI64(struct.txnId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lookupNodeIds_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lookupNodeIds_argsTupleScheme getScheme() {
        return new lookupNodeIds_argsTupleScheme();
      }
    }

    private static class lookupNodeIds_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<lookupNodeIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lookupNodeIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRequestId()) {
          optionals.set(0);
        }
        if (struct.isSetTxnId()) {
          optionals.set(1);
        }
        if (struct.isSetNodeIds()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRequestId()) {
          oprot.writeI64(struct.requestId);
        }
        if (struct.isSetTxnId()) {
          oprot.writeI64(struct.txnId);
        }
        if (struct.isSetNodeIds()) {
          {
            oprot.writeI32(struct.nodeIds.size());
            for (TLZ_NodeId _iter60 : struct.nodeIds)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lookupNodeIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.requestId = iprot.readI64();
          struct.setRequestIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.txnId = iprot.readI64();
          struct.setTxnIdIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.nodeIds = new java.util.ArrayList<TLZ_NodeId>(_list61.size);
            TLZ_NodeId _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new TLZ_NodeId();
              _elem62.read(iprot);
              struct.nodeIds.add(_elem62);
            }
          }
          struct.setNodeIdsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class lookupNodeIds_result implements org.apache.thrift.TBase<lookupNodeIds_result, lookupNodeIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<lookupNodeIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lookupNodeIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new lookupNodeIds_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new lookupNodeIds_resultTupleSchemeFactory();

    public java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.jena.riot.thrift.wire.RDF_Term.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lookupNodeIds_result.class, metaDataMap);
    }

    public lookupNodeIds_result() {
    }

    public lookupNodeIds_result(
      java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lookupNodeIds_result(lookupNodeIds_result other) {
      if (other.isSetSuccess()) {
        java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term> __this__success = new java.util.ArrayList<org.apache.jena.riot.thrift.wire.RDF_Term>(other.success.size());
        for (org.apache.jena.riot.thrift.wire.RDF_Term other_element : other.success) {
          __this__success.add(new org.apache.jena.riot.thrift.wire.RDF_Term(other_element));
        }
        this.success = __this__success;
      }
    }

    public lookupNodeIds_result deepCopy() {
      return new lookupNodeIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<org.apache.jena.riot.thrift.wire.RDF_Term> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(org.apache.jena.riot.thrift.wire.RDF_Term elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<org.apache.jena.riot.thrift.wire.RDF_Term>();
      }
      this.success.add(elem);
    }

    public java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term> getSuccess() {
      return this.success;
    }

    public lookupNodeIds_result setSuccess(java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<org.apache.jena.riot.thrift.wire.RDF_Term>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof lookupNodeIds_result)
        return this.equals((lookupNodeIds_result)that);
      return false;
    }

    public boolean equals(lookupNodeIds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(lookupNodeIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("lookupNodeIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lookupNodeIds_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lookupNodeIds_resultStandardScheme getScheme() {
        return new lookupNodeIds_resultStandardScheme();
      }
    }

    private static class lookupNodeIds_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<lookupNodeIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lookupNodeIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<org.apache.jena.riot.thrift.wire.RDF_Term>(_list64.size);
                  org.apache.jena.riot.thrift.wire.RDF_Term _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = new org.apache.jena.riot.thrift.wire.RDF_Term();
                    _elem65.read(iprot);
                    struct.success.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lookupNodeIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (org.apache.jena.riot.thrift.wire.RDF_Term _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lookupNodeIds_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lookupNodeIds_resultTupleScheme getScheme() {
        return new lookupNodeIds_resultTupleScheme();
      }
    }

    private static class lookupNodeIds_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<lookupNodeIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lookupNodeIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (org.apache.jena.riot.thrift.wire.RDF_Term _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lookupNodeIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<org.apache.jena.riot.thrift.wire.RDF_Term>(_list69.size);
            org.apache.jena.riot.thrift.wire.RDF_Term _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = new org.apache.jena.riot.thrift.wire.RDF_Term();
              _elem70.read(iprot);
              struct.success.add(_elem70);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
